{"ast":null,"code":"import { createSuitMixin as t } from \"../mixins/suit.js\";\nimport { createWidgetMixin as e } from \"../mixins/widget.js\";\nimport { connectRange as n } from \"instantsearch.js/es/connectors\";\nimport { createPanelConsumerMixin as i } from \"../mixins/panel.js\";\n\nvar a = function (t) {\n  return t && Boolean(t.range) && t.range.min !== t.range.max;\n};\n\nexport default {\n  render: function () {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;\n    return t.state ? n(\"div\", {\n      class: [t.suit(), !t.canRefine && t.suit(\"\", \"noRefinement\")]\n    }, [t._t(\"default\", [n(\"form\", {\n      class: t.suit(\"form\"),\n      on: {\n        submit: function (e) {\n          e.preventDefault(), t.refine({\n            min: t.pick(t.minInput, t.values.min),\n            max: t.pick(t.maxInput, t.values.max)\n          });\n        }\n      }\n    }, [n(\"label\", {\n      class: t.suit(\"label\")\n    }, [t._t(\"minLabel\"), t._v(\" \"), n(\"input\", {\n      class: [t.suit(\"input\"), t.suit(\"input\", \"min\")],\n      attrs: {\n        type: \"number\",\n        step: t.step,\n        min: t.state.range.min,\n        max: t.state.range.max,\n        placeholder: t.state.range.min\n      },\n      domProps: {\n        value: t.values.min\n      },\n      on: {\n        change: function (e) {\n          t.minInput = e.currentTarget.value;\n        }\n      }\n    })], 2), t._v(\" \"), n(\"span\", {\n      class: t.suit(\"separator\")\n    }, [t._t(\"separator\", [t._v(\"to\")])], 2), t._v(\" \"), n(\"label\", {\n      class: t.suit(\"label\")\n    }, [t._t(\"maxLabel\"), t._v(\" \"), n(\"input\", {\n      class: [t.suit(\"input\"), t.suit(\"input\", \"max\")],\n      attrs: {\n        type: \"number\",\n        step: t.step,\n        min: t.state.range.min,\n        max: t.state.range.max,\n        placeholder: t.state.range.max\n      },\n      domProps: {\n        value: t.values.max\n      },\n      on: {\n        change: function (e) {\n          t.maxInput = e.currentTarget.value;\n        }\n      }\n    })], 2), t._v(\" \"), n(\"button\", {\n      class: t.suit(\"submit\"),\n      attrs: {\n        type: \"submit\"\n      }\n    }, [t._t(\"submitLabel\", [t._v(\"Go\")])], 2)])], {\n      currentRefinement: t.values,\n      refine: t.refine,\n      canRefine: t.canRefine,\n      range: t.state.range,\n      sendEvent: t.state.sendEvent\n    })], 2) : t._e();\n  },\n  staticRenderFns: [],\n  name: \"AisRangeInput\",\n  mixins: [t({\n    name: \"RangeInput\"\n  }), e({\n    connector: n\n  }), i({\n    mapStateToCanRefine: a\n  })],\n  props: {\n    attribute: {\n      type: String,\n      required: !0\n    },\n    min: {\n      type: Number,\n      required: !1,\n      default: void 0\n    },\n    max: {\n      type: Number,\n      required: !1,\n      default: void 0\n    },\n    precision: {\n      type: Number,\n      required: !1,\n      default: 0\n    }\n  },\n  data: function () {\n    return {\n      minInput: void 0,\n      maxInput: void 0\n    };\n  },\n  updated: function () {\n    this.minInput = void 0, this.maxInput = void 0;\n  },\n  computed: {\n    widgetParams: function () {\n      return {\n        attribute: this.attribute,\n        min: this.min,\n        max: this.max,\n        precision: this.precision\n      };\n    },\n    canRefine: function () {\n      return a(this.state);\n    },\n    step: function () {\n      return 1 / Math.pow(10, this.precision);\n    },\n    values: function () {\n      var t = this.state.start,\n          e = t[0],\n          n = t[1],\n          i = this.state.range,\n          a = i.min,\n          s = i.max;\n      return {\n        min: e !== -1 / 0 && e !== a ? e : void 0,\n        max: n !== 1 / 0 && n !== s ? n : void 0\n      };\n    }\n  },\n  methods: {\n    pick: function (t, e) {\n      return null != t ? t : e;\n    },\n    refine: function (t) {\n      var e = t.min,\n          n = t.max;\n      this.state.refine([e, n]);\n    }\n  }\n};","map":{"version":3,"sources":["../../../../src/components/RangeInput.vue"],"names":["const","mapStateToCanRefine","state","Boolean","range","min","max","render","name","mixins","createSuitMixin","createWidgetMixin","connector","connectRange","createPanelConsumerMixin","props","attribute","type","String","required","Number","default","undefined","precision","data","minInput","maxInput","updated","this","computed","widgetParams","canRefine","step","Math","pow","values","start","minValue","Infinity","minRange","maxValue","maxRange","methods","pick","first","second","refine","ref"],"mappings":"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","sourcesContent":["<template>\n  <div\n    v-if=\"state\"\n    :class=\"[suit(), !canRefine && suit('', 'noRefinement')]\"\n  >\n    <slot\n      :current-refinement=\"values\"\n      :refine=\"refine\"\n      :can-refine=\"canRefine\"\n      :range=\"state.range\"\n      :send-event=\"state.sendEvent\"\n    >\n      <form\n        :class=\"suit('form')\"\n        @submit.prevent=\"refine({ min: pick(minInput, values.min), max: pick(maxInput, values.max) })\"\n      >\n        <label :class=\"suit('label')\">\n          <slot name=\"minLabel\" />\n          <input\n            type=\"number\"\n            :class=\"[suit('input'), suit('input', 'min')]\"\n            :step=\"step\"\n            :min=\"state.range.min\"\n            :max=\"state.range.max\"\n            :placeholder=\"state.range.min\"\n            :value=\"values.min\"\n            @change=\"minInput = $event.currentTarget.value\"\n          >\n        </label>\n        <span :class=\"suit('separator')\">\n          <slot name=\"separator\">to</slot>\n        </span>\n        <label :class=\"suit('label')\">\n          <slot name=\"maxLabel\" />\n          <input\n            :class=\"[suit('input'), suit('input', 'max')]\"\n            type=\"number\"\n            :step=\"step\"\n            :min=\"state.range.min\"\n            :max=\"state.range.max\"\n            :placeholder=\"state.range.max\"\n            :value=\"values.max\"\n            @change=\"maxInput = $event.currentTarget.value\"\n          >\n        </label>\n        <button\n          :class=\"suit('submit')\"\n          type=\"submit\"\n        >\n          <slot name=\"submitLabel\">Go</slot>\n        </button>\n      </form>\n    </slot>\n  </div>\n</template>\n\n<script>\nimport { connectRange } from 'instantsearch.js/es/connectors';\nimport { createWidgetMixin } from '../mixins/widget';\nimport { createPanelConsumerMixin } from '../mixins/panel';\nimport { createSuitMixin } from '../mixins/suit';\n\nconst mapStateToCanRefine = state =>\n  state && Boolean(state.range) && state.range.min !== state.range.max;\n\nexport default {\n  name: 'AisRangeInput',\n  mixins: [\n    createSuitMixin({ name: 'RangeInput' }),\n    createWidgetMixin({ connector: connectRange }),\n    createPanelConsumerMixin({\n      mapStateToCanRefine,\n    }),\n  ],\n  props: {\n    attribute: {\n      type: String,\n      required: true,\n    },\n    min: {\n      type: Number,\n      required: false,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      required: false,\n      default: undefined,\n    },\n    precision: {\n      type: Number,\n      required: false,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      minInput: undefined,\n      maxInput: undefined,\n    };\n  },\n  updated() {\n    this.minInput = undefined;\n    this.maxInput = undefined;\n  },\n  computed: {\n    widgetParams() {\n      return {\n        attribute: this.attribute,\n        min: this.min,\n        max: this.max,\n        precision: this.precision,\n      };\n    },\n    canRefine() {\n      return mapStateToCanRefine(this.state);\n    },\n    step() {\n      return 1 / Math.pow(10, this.precision);\n    },\n    values() {\n      const [minValue, maxValue] = this.state.start;\n      const { min: minRange, max: maxRange } = this.state.range;\n\n      return {\n        min:\n          minValue !== -Infinity && minValue !== minRange\n            ? minValue\n            : undefined,\n        max:\n          maxValue !== Infinity && maxValue !== maxRange ? maxValue : undefined,\n      };\n    },\n  },\n  methods: {\n    pick(first, second) {\n      if (first !== null && first !== undefined) {\n        return first;\n      } else {\n        return second;\n      }\n    },\n    refine({ min, max }) {\n      this.state.refine([min, max]);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}