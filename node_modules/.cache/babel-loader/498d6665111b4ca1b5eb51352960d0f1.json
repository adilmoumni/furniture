{"ast":null,"code":"import isDomElement from './isDomElement';\n/**\n * Return the container. If it's a string, it is considered a\n * css selector and retrieves the first matching element. Otherwise\n * test if it validates that it's a correct DOMElement.\n *\n * @param {string|HTMLElement} selectorOrHTMLElement CSS Selector or container node.\n * @return {HTMLElement} Container node\n * @throws Error when the type is not correct\n */\n\nfunction getContainerNode(selectorOrHTMLElement) {\n  var isSelectorString = typeof selectorOrHTMLElement === 'string';\n  var domElement = isSelectorString ? document.querySelector(selectorOrHTMLElement) : selectorOrHTMLElement;\n\n  if (!isDomElement(domElement)) {\n    var errorMessage = 'Container must be `string` or `HTMLElement`.';\n\n    if (isSelectorString) {\n      errorMessage += \" Unable to find \".concat(selectorOrHTMLElement);\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  return domElement;\n}\n\nexport default getContainerNode;","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/lib/utils/getContainerNode.js"],"names":["isDomElement","getContainerNode","selectorOrHTMLElement","isSelectorString","domElement","document","querySelector","errorMessage","concat","Error"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,gBAAT,CAA0BC,qBAA1B,EAAiD;AAC/C,MAAIC,gBAAgB,GAAG,OAAOD,qBAAP,KAAiC,QAAxD;AACA,MAAIE,UAAU,GAAGD,gBAAgB,GAAGE,QAAQ,CAACC,aAAT,CAAuBJ,qBAAvB,CAAH,GAAmDA,qBAApF;;AAEA,MAAI,CAACF,YAAY,CAACI,UAAD,CAAjB,EAA+B;AAC7B,QAAIG,YAAY,GAAG,8CAAnB;;AAEA,QAAIJ,gBAAJ,EAAsB;AACpBI,MAAAA,YAAY,IAAI,mBAAmBC,MAAnB,CAA0BN,qBAA1B,CAAhB;AACD;;AAED,UAAM,IAAIO,KAAJ,CAAUF,YAAV,CAAN;AACD;;AAED,SAAOH,UAAP;AACD;;AAED,eAAeH,gBAAf","sourcesContent":["import isDomElement from './isDomElement';\n/**\n * Return the container. If it's a string, it is considered a\n * css selector and retrieves the first matching element. Otherwise\n * test if it validates that it's a correct DOMElement.\n *\n * @param {string|HTMLElement} selectorOrHTMLElement CSS Selector or container node.\n * @return {HTMLElement} Container node\n * @throws Error when the type is not correct\n */\n\nfunction getContainerNode(selectorOrHTMLElement) {\n  var isSelectorString = typeof selectorOrHTMLElement === 'string';\n  var domElement = isSelectorString ? document.querySelector(selectorOrHTMLElement) : selectorOrHTMLElement;\n\n  if (!isDomElement(domElement)) {\n    var errorMessage = 'Container must be `string` or `HTMLElement`.';\n\n    if (isSelectorString) {\n      errorMessage += \" Unable to find \".concat(selectorOrHTMLElement);\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  return domElement;\n}\n\nexport default getContainerNode;"]},"metadata":{},"sourceType":"module"}