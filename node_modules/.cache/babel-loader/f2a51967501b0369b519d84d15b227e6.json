{"ast":null,"code":"import { createSuitMixin as n } from \"../mixins/suit.js\";\nimport \"vue\";\nimport { version as t } from \"./vue-compat/index-2.js\";\nimport { version as e } from \"../../package.json.js\";\nimport { _objectSpread as a } from \"./polyfills.js\";\n\nvar i = function (i) {\n  var s;\n  return a(((s = {\n    mixins: [n({\n      name: \"InstantSearch\"\n    })],\n    provide: function () {\n      return {\n        $_ais_instantSearchInstance: this.instantSearchInstance\n      };\n    },\n    watch: {\n      searchClient: function (n) {\n        this.instantSearchInstance.helper.setClient(n).search();\n      },\n      indexName: function (n) {\n        this.instantSearchInstance.helper.setIndex(n).search();\n      },\n      stalledSearchDelay: function (n) {\n        this.instantSearchInstance._stalledSearchDelay = n;\n      },\n      routing: function () {\n        throw new Error(\"routing configuration can not be changed dynamically at this point.\\n\\nPlease open a new issue: https://github.com/algolia/vue-instantsearch/issues/new?template=feature.md\");\n      },\n      searchFunction: function (n) {\n        this.instantSearchInstance._searchFunction = n;\n      },\n      middlewares: {\n        immediate: !0,\n        handler: function (n, t) {\n          var e = this;\n          (t || []).filter(function (t) {\n            return -1 === (n || []).indexOf(t);\n          }).forEach(function (n) {\n            e.instantSearchInstance.unuse(n);\n          }), (n || []).filter(function (n) {\n            return -1 === (t || []).indexOf(n);\n          }).forEach(function (n) {\n            e.instantSearchInstance.use(n);\n          });\n        }\n      }\n    },\n    created: function () {\n      var n = this.instantSearchInstance.client;\n      \"function\" == typeof n.addAlgoliaAgent && (n.addAlgoliaAgent(\"Vue (\" + t + \")\"), n.addAlgoliaAgent(\"Vue InstantSearch (\" + e + \")\"));\n    },\n    mounted: function () {\n      var n = this;\n      this.$nextTick(function () {\n        n.instantSearchInstance.started || n.instantSearchInstance.start();\n      });\n    }\n  }).beforeDestroy = function () {\n    this.instantSearchInstance.started && this.instantSearchInstance.dispose(), this.instantSearchInstance.__initialSearchResults = void 0;\n  }, s), i);\n};\n\nexport { i as createInstantSearchComponent };","map":{"version":3,"sources":["../../../../src/util/createInstantSearchComponent.js"],"names":["createInstantSearchComponent","component","_objectSpread","mixins","createSuitMixin","name","provide","$_ais_instantSearchInstance","this","instantSearchInstance","watch","searchClient","helper","setClient","search","indexName","setIndex","stalledSearchDelay","_stalledSearchDelay","routing","Error","searchFunction","_searchFunction","middlewares","immediate","handler","next","prev","filter","middleware","indexOf","forEach","middlewareToRemove","unuse","middlewareToAdd","use","created","const","client","addAlgoliaAgent","vueVersion","version","mounted","$nextTick","started","start","dispose","__initialSearchResults","undefined"],"mappings":"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","sourcesContent":["import { createSuitMixin } from '../mixins/suit';\nimport { version } from '../../package.json'; // rollup does pick only what needed from json\nimport { _objectSpread } from './polyfills';\nimport { isVue3, version as vueVersion } from '../util/vue-compat';\n\nexport const createInstantSearchComponent = component =>\n  _objectSpread(\n    {\n      mixins: [createSuitMixin({ name: 'InstantSearch' })],\n      provide() {\n        return {\n          $_ais_instantSearchInstance: this.instantSearchInstance,\n        };\n      },\n      watch: {\n        searchClient(searchClient) {\n          this.instantSearchInstance.helper.setClient(searchClient).search();\n        },\n        indexName(indexName) {\n          this.instantSearchInstance.helper.setIndex(indexName).search();\n        },\n        stalledSearchDelay(stalledSearchDelay) {\n          // private InstantSearch.js API:\n          this.instantSearchInstance._stalledSearchDelay = stalledSearchDelay;\n        },\n        routing() {\n          throw new Error(\n            'routing configuration can not be changed dynamically at this point.' +\n              '\\n\\n' +\n              'Please open a new issue: https://github.com/algolia/vue-instantsearch/issues/new?template=feature.md'\n          );\n        },\n        searchFunction(searchFunction) {\n          // private InstantSearch.js API:\n          this.instantSearchInstance._searchFunction = searchFunction;\n        },\n        middlewares: {\n          immediate: true,\n          handler(next, prev) {\n            (prev || [])\n              .filter(middleware => (next || []).indexOf(middleware) === -1)\n              .forEach(middlewareToRemove => {\n                this.instantSearchInstance.unuse(middlewareToRemove);\n              });\n\n            (next || [])\n              .filter(middleware => (prev || []).indexOf(middleware) === -1)\n              .forEach(middlewareToAdd => {\n                this.instantSearchInstance.use(middlewareToAdd);\n              });\n          },\n        },\n      },\n      created() {\n        const searchClient = this.instantSearchInstance.client;\n        if (typeof searchClient.addAlgoliaAgent === 'function') {\n          searchClient.addAlgoliaAgent(`Vue (${vueVersion})`);\n          searchClient.addAlgoliaAgent(`Vue InstantSearch (${version})`);\n        }\n      },\n      mounted() {\n        // from the documentation: https://vuejs.org/v2/api/#mounted\n        // \"Note that mounted does not guarantee that all child components have also been mounted. If you want to\n        // wait until the entire view has been rendered, you can use vm.$nextTick inside of mounted\"\n        this.$nextTick(() => {\n          if (!this.instantSearchInstance.started) {\n            this.instantSearchInstance.start();\n          }\n        });\n      },\n      [isVue3 ? 'beforeUnmount' : 'beforeDestroy']() {\n        if (this.instantSearchInstance.started) {\n          this.instantSearchInstance.dispose();\n        }\n\n        // a hydrated instance will no longer be hydrated once disposed, and starts from scratch\n        this.instantSearchInstance.__initialSearchResults = undefined;\n      },\n    },\n    component\n  );\n"]},"metadata":{},"sourceType":"module"}