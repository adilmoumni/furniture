{"ast":null,"code":"import find from './find';\nimport unescapeRefinement from './unescapeRefinement';\n\nfunction getRefinement(state, type, attribute, name) {\n  var resultsFacets = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var res = {\n    type: type,\n    attribute: attribute,\n    name: name\n  };\n  var facet = find(resultsFacets, function (resultsFacet) {\n    return resultsFacet.name === attribute;\n  });\n  var count;\n\n  if (type === 'hierarchical') {\n    (function () {\n      var facetDeclaration = state.getHierarchicalFacetByName(attribute);\n      var nameParts = name.split(facetDeclaration.separator);\n\n      var getFacetRefinement = function getFacetRefinement(facetData) {\n        return function (refinementKey) {\n          return facetData[refinementKey];\n        };\n      };\n\n      var _loop = function _loop(i) {\n        facet = facet && facet.data && find(Object.keys(facet.data).map(getFacetRefinement(facet.data)), function (refinement) {\n          return refinement.name === nameParts[i];\n        });\n      };\n\n      for (var i = 0; facet !== undefined && i < nameParts.length; ++i) {\n        _loop(i);\n      }\n\n      count = facet && facet.count;\n    })();\n  } else {\n    count = facet && facet.data && facet.data[res.name];\n  }\n\n  var exhaustive = facet && facet.exhaustive;\n\n  if (count !== undefined) {\n    res.count = count;\n  }\n\n  if (exhaustive !== undefined) {\n    res.exhaustive = exhaustive;\n  }\n\n  return res;\n}\n\nfunction getRefinements(results, state) {\n  var includesQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var refinements = [];\n  var _state$facetsRefineme = state.facetsRefinements,\n      facetsRefinements = _state$facetsRefineme === void 0 ? {} : _state$facetsRefineme,\n      _state$facetsExcludes = state.facetsExcludes,\n      facetsExcludes = _state$facetsExcludes === void 0 ? {} : _state$facetsExcludes,\n      _state$disjunctiveFac = state.disjunctiveFacetsRefinements,\n      disjunctiveFacetsRefinements = _state$disjunctiveFac === void 0 ? {} : _state$disjunctiveFac,\n      _state$hierarchicalFa = state.hierarchicalFacetsRefinements,\n      hierarchicalFacetsRefinements = _state$hierarchicalFa === void 0 ? {} : _state$hierarchicalFa,\n      _state$numericRefinem = state.numericRefinements,\n      numericRefinements = _state$numericRefinem === void 0 ? {} : _state$numericRefinem,\n      _state$tagRefinements = state.tagRefinements,\n      tagRefinements = _state$tagRefinements === void 0 ? [] : _state$tagRefinements;\n  Object.keys(facetsRefinements).forEach(function (attribute) {\n    var refinementNames = facetsRefinements[attribute];\n    refinementNames.forEach(function (refinementName) {\n      refinements.push(getRefinement(state, 'facet', attribute, refinementName, results.facets));\n    });\n  });\n  Object.keys(facetsExcludes).forEach(function (attribute) {\n    var refinementNames = facetsExcludes[attribute];\n    refinementNames.forEach(function (refinementName) {\n      refinements.push({\n        type: 'exclude',\n        attribute: attribute,\n        name: refinementName,\n        exclude: true\n      });\n    });\n  });\n  Object.keys(disjunctiveFacetsRefinements).forEach(function (attribute) {\n    var refinementNames = disjunctiveFacetsRefinements[attribute];\n    refinementNames.forEach(function (refinementName) {\n      refinements.push(getRefinement(state, 'disjunctive', attribute, // We unescape any disjunctive refined values with `unescapeRefinement` because\n      // they can be escaped on negative numeric values with `escapeRefinement`.\n      unescapeRefinement(refinementName), results.disjunctiveFacets));\n    });\n  });\n  Object.keys(hierarchicalFacetsRefinements).forEach(function (attribute) {\n    var refinementNames = hierarchicalFacetsRefinements[attribute];\n    refinementNames.forEach(function (refinement) {\n      refinements.push(getRefinement(state, 'hierarchical', attribute, refinement, results.hierarchicalFacets));\n    });\n  });\n  Object.keys(numericRefinements).forEach(function (attribute) {\n    var operators = numericRefinements[attribute];\n    Object.keys(operators).forEach(function (operatorOriginal) {\n      var operator = operatorOriginal;\n      var valueOrValues = operators[operator];\n      var refinementNames = Array.isArray(valueOrValues) ? valueOrValues : [valueOrValues];\n      refinementNames.forEach(function (refinementName) {\n        refinements.push({\n          type: 'numeric',\n          attribute: attribute,\n          name: \"\".concat(refinementName),\n          numericValue: refinementName,\n          operator: operator\n        });\n      });\n    });\n  });\n  tagRefinements.forEach(function (refinementName) {\n    refinements.push({\n      type: 'tag',\n      attribute: '_tags',\n      name: refinementName\n    });\n  });\n\n  if (includesQuery && state.query && state.query.trim()) {\n    refinements.push({\n      attribute: 'query',\n      type: 'query',\n      name: state.query,\n      query: state.query\n    });\n  }\n\n  return refinements;\n}\n\nexport default getRefinements;","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/lib/utils/getRefinements.js"],"names":["find","unescapeRefinement","getRefinement","state","type","attribute","name","resultsFacets","arguments","length","undefined","res","facet","resultsFacet","count","facetDeclaration","getHierarchicalFacetByName","nameParts","split","separator","getFacetRefinement","facetData","refinementKey","_loop","i","data","Object","keys","map","refinement","exhaustive","getRefinements","results","includesQuery","refinements","_state$facetsRefineme","facetsRefinements","_state$facetsExcludes","facetsExcludes","_state$disjunctiveFac","disjunctiveFacetsRefinements","_state$hierarchicalFa","hierarchicalFacetsRefinements","_state$numericRefinem","numericRefinements","_state$tagRefinements","tagRefinements","forEach","refinementNames","refinementName","push","facets","exclude","disjunctiveFacets","hierarchicalFacets","operators","operatorOriginal","operator","valueOrValues","Array","isArray","concat","numericValue","query","trim"],"mappings":"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","sourcesContent":["import find from './find';\nimport unescapeRefinement from './unescapeRefinement';\n\nfunction getRefinement(state, type, attribute, name) {\n  var resultsFacets = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var res = {\n    type: type,\n    attribute: attribute,\n    name: name\n  };\n  var facet = find(resultsFacets, function (resultsFacet) {\n    return resultsFacet.name === attribute;\n  });\n  var count;\n\n  if (type === 'hierarchical') {\n    (function () {\n      var facetDeclaration = state.getHierarchicalFacetByName(attribute);\n      var nameParts = name.split(facetDeclaration.separator);\n\n      var getFacetRefinement = function getFacetRefinement(facetData) {\n        return function (refinementKey) {\n          return facetData[refinementKey];\n        };\n      };\n\n      var _loop = function _loop(i) {\n        facet = facet && facet.data && find(Object.keys(facet.data).map(getFacetRefinement(facet.data)), function (refinement) {\n          return refinement.name === nameParts[i];\n        });\n      };\n\n      for (var i = 0; facet !== undefined && i < nameParts.length; ++i) {\n        _loop(i);\n      }\n\n      count = facet && facet.count;\n    })();\n  } else {\n    count = facet && facet.data && facet.data[res.name];\n  }\n\n  var exhaustive = facet && facet.exhaustive;\n\n  if (count !== undefined) {\n    res.count = count;\n  }\n\n  if (exhaustive !== undefined) {\n    res.exhaustive = exhaustive;\n  }\n\n  return res;\n}\n\nfunction getRefinements(results, state) {\n  var includesQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var refinements = [];\n  var _state$facetsRefineme = state.facetsRefinements,\n      facetsRefinements = _state$facetsRefineme === void 0 ? {} : _state$facetsRefineme,\n      _state$facetsExcludes = state.facetsExcludes,\n      facetsExcludes = _state$facetsExcludes === void 0 ? {} : _state$facetsExcludes,\n      _state$disjunctiveFac = state.disjunctiveFacetsRefinements,\n      disjunctiveFacetsRefinements = _state$disjunctiveFac === void 0 ? {} : _state$disjunctiveFac,\n      _state$hierarchicalFa = state.hierarchicalFacetsRefinements,\n      hierarchicalFacetsRefinements = _state$hierarchicalFa === void 0 ? {} : _state$hierarchicalFa,\n      _state$numericRefinem = state.numericRefinements,\n      numericRefinements = _state$numericRefinem === void 0 ? {} : _state$numericRefinem,\n      _state$tagRefinements = state.tagRefinements,\n      tagRefinements = _state$tagRefinements === void 0 ? [] : _state$tagRefinements;\n  Object.keys(facetsRefinements).forEach(function (attribute) {\n    var refinementNames = facetsRefinements[attribute];\n    refinementNames.forEach(function (refinementName) {\n      refinements.push(getRefinement(state, 'facet', attribute, refinementName, results.facets));\n    });\n  });\n  Object.keys(facetsExcludes).forEach(function (attribute) {\n    var refinementNames = facetsExcludes[attribute];\n    refinementNames.forEach(function (refinementName) {\n      refinements.push({\n        type: 'exclude',\n        attribute: attribute,\n        name: refinementName,\n        exclude: true\n      });\n    });\n  });\n  Object.keys(disjunctiveFacetsRefinements).forEach(function (attribute) {\n    var refinementNames = disjunctiveFacetsRefinements[attribute];\n    refinementNames.forEach(function (refinementName) {\n      refinements.push(getRefinement(state, 'disjunctive', attribute, // We unescape any disjunctive refined values with `unescapeRefinement` because\n      // they can be escaped on negative numeric values with `escapeRefinement`.\n      unescapeRefinement(refinementName), results.disjunctiveFacets));\n    });\n  });\n  Object.keys(hierarchicalFacetsRefinements).forEach(function (attribute) {\n    var refinementNames = hierarchicalFacetsRefinements[attribute];\n    refinementNames.forEach(function (refinement) {\n      refinements.push(getRefinement(state, 'hierarchical', attribute, refinement, results.hierarchicalFacets));\n    });\n  });\n  Object.keys(numericRefinements).forEach(function (attribute) {\n    var operators = numericRefinements[attribute];\n    Object.keys(operators).forEach(function (operatorOriginal) {\n      var operator = operatorOriginal;\n      var valueOrValues = operators[operator];\n      var refinementNames = Array.isArray(valueOrValues) ? valueOrValues : [valueOrValues];\n      refinementNames.forEach(function (refinementName) {\n        refinements.push({\n          type: 'numeric',\n          attribute: attribute,\n          name: \"\".concat(refinementName),\n          numericValue: refinementName,\n          operator: operator\n        });\n      });\n    });\n  });\n  tagRefinements.forEach(function (refinementName) {\n    refinements.push({\n      type: 'tag',\n      attribute: '_tags',\n      name: refinementName\n    });\n  });\n\n  if (includesQuery && state.query && state.query.trim()) {\n    refinements.push({\n      attribute: 'query',\n      type: 'query',\n      name: state.query,\n      query: state.query\n    });\n  }\n\n  return refinements;\n}\n\nexport default getRefinements;"]},"metadata":{},"sourceType":"module"}