{"ast":null,"code":"/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n(function (Hogan) {\n  // Setup regex  assignments\n  // remove whitespace according to Mustache spec\n  var rIsWhitespace = /\\S/,\n      rQuot = /\\\"/g,\n      rNewline = /\\n/g,\n      rCr = /\\r/g,\n      rSlash = /\\\\/g,\n      rLineSep = /\\u2028/,\n      rParagraphSep = /\\u2029/;\n  Hogan.tags = {\n    '#': 1,\n    '^': 2,\n    '<': 3,\n    '$': 4,\n    '/': 5,\n    '!': 6,\n    '>': 7,\n    '=': 8,\n    '_v': 9,\n    '{': 10,\n    '&': 11,\n    '_t': 12\n  };\n\n  Hogan.scan = function scan(text, delimiters) {\n    var len = text.length,\n        IN_TEXT = 0,\n        IN_TAG_TYPE = 1,\n        IN_TAG = 2,\n        state = IN_TEXT,\n        tagType = null,\n        tag = null,\n        buf = '',\n        tokens = [],\n        seenTag = false,\n        i = 0,\n        lineStart = 0,\n        otag = '{{',\n        ctag = '}}';\n\n    function addBuf() {\n      if (buf.length > 0) {\n        tokens.push({\n          tag: '_t',\n          text: new String(buf)\n        });\n        buf = '';\n      }\n    }\n\n    function lineIsWhitespace() {\n      var isAllWhitespace = true;\n\n      for (var j = lineStart; j < tokens.length; j++) {\n        isAllWhitespace = Hogan.tags[tokens[j].tag] < Hogan.tags['_v'] || tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null;\n\n        if (!isAllWhitespace) {\n          return false;\n        }\n      }\n\n      return isAllWhitespace;\n    }\n\n    function filterLine(haveSeenTag, noNewLine) {\n      addBuf();\n\n      if (haveSeenTag && lineIsWhitespace()) {\n        for (var j = lineStart, next; j < tokens.length; j++) {\n          if (tokens[j].text) {\n            if ((next = tokens[j + 1]) && next.tag == '>') {\n              // set indent to token value\n              next.indent = tokens[j].text.toString();\n            }\n\n            tokens.splice(j, 1);\n          }\n        }\n      } else if (!noNewLine) {\n        tokens.push({\n          tag: '\\n'\n        });\n      }\n\n      seenTag = false;\n      lineStart = tokens.length;\n    }\n\n    function changeDelimiters(text, index) {\n      var close = '=' + ctag,\n          closeIndex = text.indexOf(close, index),\n          delimiters = trim(text.substring(text.indexOf('=', index) + 1, closeIndex)).split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[delimiters.length - 1];\n      return closeIndex + close.length - 1;\n    }\n\n    if (delimiters) {\n      delimiters = delimiters.split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[1];\n    }\n\n    for (i = 0; i < len; i++) {\n      if (state == IN_TEXT) {\n        if (tagChange(otag, text, i)) {\n          --i;\n          addBuf();\n          state = IN_TAG_TYPE;\n        } else {\n          if (text.charAt(i) == '\\n') {\n            filterLine(seenTag);\n          } else {\n            buf += text.charAt(i);\n          }\n        }\n      } else if (state == IN_TAG_TYPE) {\n        i += otag.length - 1;\n        tag = Hogan.tags[text.charAt(i + 1)];\n        tagType = tag ? text.charAt(i + 1) : '_v';\n\n        if (tagType == '=') {\n          i = changeDelimiters(text, i);\n          state = IN_TEXT;\n        } else {\n          if (tag) {\n            i++;\n          }\n\n          state = IN_TAG;\n        }\n\n        seenTag = i;\n      } else {\n        if (tagChange(ctag, text, i)) {\n          tokens.push({\n            tag: tagType,\n            n: trim(buf),\n            otag: otag,\n            ctag: ctag,\n            i: tagType == '/' ? seenTag - otag.length : i + ctag.length\n          });\n          buf = '';\n          i += ctag.length - 1;\n          state = IN_TEXT;\n\n          if (tagType == '{') {\n            if (ctag == '}}') {\n              i++;\n            } else {\n              cleanTripleStache(tokens[tokens.length - 1]);\n            }\n          }\n        } else {\n          buf += text.charAt(i);\n        }\n      }\n    }\n\n    filterLine(seenTag, true);\n    return tokens;\n  };\n\n  function cleanTripleStache(token) {\n    if (token.n.substr(token.n.length - 1) === '}') {\n      token.n = token.n.substring(0, token.n.length - 1);\n    }\n  }\n\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n\n    return s.replace(/^\\s*|\\s*$/g, '');\n  }\n\n  function tagChange(tag, text, index) {\n    if (text.charAt(index) != tag.charAt(0)) {\n      return false;\n    }\n\n    for (var i = 1, l = tag.length; i < l; i++) {\n      if (text.charAt(index + i) != tag.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  } // the tags allowed inside super templates\n\n\n  var allowedInSuper = {\n    '_t': true,\n    '\\n': true,\n    '$': true,\n    '/': true\n  };\n\n  function buildTree(tokens, kind, stack, customTags) {\n    var instructions = [],\n        opener = null,\n        tail = null,\n        token = null;\n    tail = stack[stack.length - 1];\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n\n      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {\n        throw new Error('Illegal content in < super tag.');\n      }\n\n      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {\n        stack.push(token);\n        token.nodes = buildTree(tokens, token.tag, stack, customTags);\n      } else if (token.tag == '/') {\n        if (stack.length === 0) {\n          throw new Error('Closing tag without opener: /' + token.n);\n        }\n\n        opener = stack.pop();\n\n        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {\n          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);\n        }\n\n        opener.end = token.i;\n        return instructions;\n      } else if (token.tag == '\\n') {\n        token.last = tokens.length == 0 || tokens[0].tag == '\\n';\n      }\n\n      instructions.push(token);\n    }\n\n    if (stack.length > 0) {\n      throw new Error('missing closing tag: ' + stack.pop().n);\n    }\n\n    return instructions;\n  }\n\n  function isOpener(token, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].o == token.n) {\n        token.tag = '#';\n        return true;\n      }\n    }\n  }\n\n  function isCloser(close, open, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].c == close && tags[i].o == open) {\n        return true;\n      }\n    }\n  }\n\n  function stringifySubstitutions(obj) {\n    var items = [];\n\n    for (var key in obj) {\n      items.push('\"' + esc(key) + '\": function(c,p,t,i) {' + obj[key] + '}');\n    }\n\n    return \"{ \" + items.join(\",\") + \" }\";\n  }\n\n  function stringifyPartials(codeObj) {\n    var partials = [];\n\n    for (var key in codeObj.partials) {\n      partials.push('\"' + esc(key) + '\":{name:\"' + esc(codeObj.partials[key].name) + '\", ' + stringifyPartials(codeObj.partials[key]) + \"}\");\n    }\n\n    return \"partials: {\" + partials.join(\",\") + \"}, subs: \" + stringifySubstitutions(codeObj.subs);\n  }\n\n  Hogan.stringify = function (codeObj, text, options) {\n    return \"{code: function (c,p,i) { \" + Hogan.wrapMain(codeObj.code) + \" },\" + stringifyPartials(codeObj) + \"}\";\n  };\n\n  var serialNo = 0;\n\n  Hogan.generate = function (tree, text, options) {\n    serialNo = 0;\n    var context = {\n      code: '',\n      subs: {},\n      partials: {}\n    };\n    Hogan.walk(tree, context);\n\n    if (options.asString) {\n      return this.stringify(context, text, options);\n    }\n\n    return this.makeTemplate(context, text, options);\n  };\n\n  Hogan.wrapMain = function (code) {\n    return 'var t=this;t.b(i=i||\"\");' + code + 'return t.fl();';\n  };\n\n  Hogan.template = Hogan.Template;\n\n  Hogan.makeTemplate = function (codeObj, text, options) {\n    var template = this.makePartials(codeObj);\n    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));\n    return new this.template(template, text, this, options);\n  };\n\n  Hogan.makePartials = function (codeObj) {\n    var key,\n        template = {\n      subs: {},\n      partials: codeObj.partials,\n      name: codeObj.name\n    };\n\n    for (key in template.partials) {\n      template.partials[key] = this.makePartials(template.partials[key]);\n    }\n\n    for (key in codeObj.subs) {\n      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);\n    }\n\n    return template;\n  };\n\n  function esc(s) {\n    return s.replace(rSlash, '\\\\\\\\').replace(rQuot, '\\\\\\\"').replace(rNewline, '\\\\n').replace(rCr, '\\\\r').replace(rLineSep, '\\\\u2028').replace(rParagraphSep, '\\\\u2029');\n  }\n\n  function chooseMethod(s) {\n    return ~s.indexOf('.') ? 'd' : 'f';\n  }\n\n  function createPartial(node, context) {\n    var prefix = \"<\" + (context.prefix || \"\");\n    var sym = prefix + node.n + serialNo++;\n    context.partials[sym] = {\n      name: node.n,\n      partials: {}\n    };\n    context.code += 't.b(t.rp(\"' + esc(sym) + '\",c,p,\"' + (node.indent || '') + '\"));';\n    return sym;\n  }\n\n  Hogan.codegen = {\n    '#': function (node, context) {\n      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),' + 'c,p,0,' + node.i + ',' + node.end + ',\"' + node.otag + \" \" + node.ctag + '\")){' + 't.rs(c,p,' + 'function(c,p,t){';\n      Hogan.walk(node.nodes, context);\n      context.code += '});c.pop();}';\n    },\n    '^': function (node, context) {\n      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),c,p,1,0,0,\"\")){';\n      Hogan.walk(node.nodes, context);\n      context.code += '};';\n    },\n    '>': createPartial,\n    '<': function (node, context) {\n      var ctx = {\n        partials: {},\n        code: '',\n        subs: {},\n        inPartial: true\n      };\n      Hogan.walk(node.nodes, ctx);\n      var template = context.partials[createPartial(node, context)];\n      template.subs = ctx.subs;\n      template.partials = ctx.partials;\n    },\n    '$': function (node, context) {\n      var ctx = {\n        subs: {},\n        code: '',\n        partials: context.partials,\n        prefix: node.n\n      };\n      Hogan.walk(node.nodes, ctx);\n      context.subs[node.n] = ctx.code;\n\n      if (!context.inPartial) {\n        context.code += 't.sub(\"' + esc(node.n) + '\",c,p,i);';\n      }\n    },\n    '\\n': function (node, context) {\n      context.code += write('\"\\\\n\"' + (node.last ? '' : ' + i'));\n    },\n    '_v': function (node, context) {\n      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n    },\n    '_t': function (node, context) {\n      context.code += write('\"' + esc(node.text) + '\"');\n    },\n    '{': tripleStache,\n    '&': tripleStache\n  };\n\n  function tripleStache(node, context) {\n    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n  }\n\n  function write(s) {\n    return 't.b(' + s + ');';\n  }\n\n  Hogan.walk = function (nodelist, context) {\n    var func;\n\n    for (var i = 0, l = nodelist.length; i < l; i++) {\n      func = Hogan.codegen[nodelist[i].tag];\n      func && func(nodelist[i], context);\n    }\n\n    return context;\n  };\n\n  Hogan.parse = function (tokens, text, options) {\n    options = options || {};\n    return buildTree(tokens, '', [], options.sectionTags || []);\n  };\n\n  Hogan.cache = {};\n\n  Hogan.cacheKey = function (text, options) {\n    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');\n  };\n\n  Hogan.compile = function (text, options) {\n    options = options || {};\n    var key = Hogan.cacheKey(text, options);\n    var template = this.cache[key];\n\n    if (template) {\n      var partials = template.partials;\n\n      for (var name in partials) {\n        delete partials[name].instance;\n      }\n\n      return template;\n    }\n\n    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);\n    return this.cache[key] = template;\n  };\n})(typeof exports !== 'undefined' ? exports : Hogan);","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/hogan.js/lib/compiler.js"],"names":["Hogan","rIsWhitespace","rQuot","rNewline","rCr","rSlash","rLineSep","rParagraphSep","tags","scan","text","delimiters","len","length","IN_TEXT","IN_TAG_TYPE","IN_TAG","state","tagType","tag","buf","tokens","seenTag","i","lineStart","otag","ctag","addBuf","push","String","lineIsWhitespace","isAllWhitespace","j","match","filterLine","haveSeenTag","noNewLine","next","indent","toString","splice","changeDelimiters","index","close","closeIndex","indexOf","trim","substring","split","tagChange","charAt","n","cleanTripleStache","token","substr","s","replace","l","allowedInSuper","buildTree","kind","stack","customTags","instructions","opener","tail","shift","Error","isOpener","nodes","pop","isCloser","end","last","o","open","c","stringifySubstitutions","obj","items","key","esc","join","stringifyPartials","codeObj","partials","name","subs","stringify","options","wrapMain","code","serialNo","generate","tree","context","walk","asString","makeTemplate","template","Template","makePartials","Function","chooseMethod","createPartial","node","prefix","sym","codegen","ctx","inPartial","write","tripleStache","nodelist","func","parse","sectionTags","cache","cacheKey","disableLambda","modelGet","compile","instance","exports"],"mappings":"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","sourcesContent":["/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n(function (Hogan) {\n  // Setup regex  assignments\n  // remove whitespace according to Mustache spec\n  var rIsWhitespace = /\\S/,\n      rQuot = /\\\"/g,\n      rNewline =  /\\n/g,\n      rCr = /\\r/g,\n      rSlash = /\\\\/g,\n      rLineSep = /\\u2028/,\n      rParagraphSep = /\\u2029/;\n\n  Hogan.tags = {\n    '#': 1, '^': 2, '<': 3, '$': 4,\n    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,\n    '{': 10, '&': 11, '_t': 12\n  };\n\n  Hogan.scan = function scan(text, delimiters) {\n    var len = text.length,\n        IN_TEXT = 0,\n        IN_TAG_TYPE = 1,\n        IN_TAG = 2,\n        state = IN_TEXT,\n        tagType = null,\n        tag = null,\n        buf = '',\n        tokens = [],\n        seenTag = false,\n        i = 0,\n        lineStart = 0,\n        otag = '{{',\n        ctag = '}}';\n\n    function addBuf() {\n      if (buf.length > 0) {\n        tokens.push({tag: '_t', text: new String(buf)});\n        buf = '';\n      }\n    }\n\n    function lineIsWhitespace() {\n      var isAllWhitespace = true;\n      for (var j = lineStart; j < tokens.length; j++) {\n        isAllWhitespace =\n          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||\n          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);\n        if (!isAllWhitespace) {\n          return false;\n        }\n      }\n\n      return isAllWhitespace;\n    }\n\n    function filterLine(haveSeenTag, noNewLine) {\n      addBuf();\n\n      if (haveSeenTag && lineIsWhitespace()) {\n        for (var j = lineStart, next; j < tokens.length; j++) {\n          if (tokens[j].text) {\n            if ((next = tokens[j+1]) && next.tag == '>') {\n              // set indent to token value\n              next.indent = tokens[j].text.toString()\n            }\n            tokens.splice(j, 1);\n          }\n        }\n      } else if (!noNewLine) {\n        tokens.push({tag:'\\n'});\n      }\n\n      seenTag = false;\n      lineStart = tokens.length;\n    }\n\n    function changeDelimiters(text, index) {\n      var close = '=' + ctag,\n          closeIndex = text.indexOf(close, index),\n          delimiters = trim(\n            text.substring(text.indexOf('=', index) + 1, closeIndex)\n          ).split(' ');\n\n      otag = delimiters[0];\n      ctag = delimiters[delimiters.length - 1];\n\n      return closeIndex + close.length - 1;\n    }\n\n    if (delimiters) {\n      delimiters = delimiters.split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[1];\n    }\n\n    for (i = 0; i < len; i++) {\n      if (state == IN_TEXT) {\n        if (tagChange(otag, text, i)) {\n          --i;\n          addBuf();\n          state = IN_TAG_TYPE;\n        } else {\n          if (text.charAt(i) == '\\n') {\n            filterLine(seenTag);\n          } else {\n            buf += text.charAt(i);\n          }\n        }\n      } else if (state == IN_TAG_TYPE) {\n        i += otag.length - 1;\n        tag = Hogan.tags[text.charAt(i + 1)];\n        tagType = tag ? text.charAt(i + 1) : '_v';\n        if (tagType == '=') {\n          i = changeDelimiters(text, i);\n          state = IN_TEXT;\n        } else {\n          if (tag) {\n            i++;\n          }\n          state = IN_TAG;\n        }\n        seenTag = i;\n      } else {\n        if (tagChange(ctag, text, i)) {\n          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,\n                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});\n          buf = '';\n          i += ctag.length - 1;\n          state = IN_TEXT;\n          if (tagType == '{') {\n            if (ctag == '}}') {\n              i++;\n            } else {\n              cleanTripleStache(tokens[tokens.length - 1]);\n            }\n          }\n        } else {\n          buf += text.charAt(i);\n        }\n      }\n    }\n\n    filterLine(seenTag, true);\n\n    return tokens;\n  }\n\n  function cleanTripleStache(token) {\n    if (token.n.substr(token.n.length - 1) === '}') {\n      token.n = token.n.substring(0, token.n.length - 1);\n    }\n  }\n\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n\n    return s.replace(/^\\s*|\\s*$/g, '');\n  }\n\n  function tagChange(tag, text, index) {\n    if (text.charAt(index) != tag.charAt(0)) {\n      return false;\n    }\n\n    for (var i = 1, l = tag.length; i < l; i++) {\n      if (text.charAt(index + i) != tag.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // the tags allowed inside super templates\n  var allowedInSuper = {'_t': true, '\\n': true, '$': true, '/': true};\n\n  function buildTree(tokens, kind, stack, customTags) {\n    var instructions = [],\n        opener = null,\n        tail = null,\n        token = null;\n\n    tail = stack[stack.length - 1];\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n\n      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {\n        throw new Error('Illegal content in < super tag.');\n      }\n\n      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {\n        stack.push(token);\n        token.nodes = buildTree(tokens, token.tag, stack, customTags);\n      } else if (token.tag == '/') {\n        if (stack.length === 0) {\n          throw new Error('Closing tag without opener: /' + token.n);\n        }\n        opener = stack.pop();\n        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {\n          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);\n        }\n        opener.end = token.i;\n        return instructions;\n      } else if (token.tag == '\\n') {\n        token.last = (tokens.length == 0) || (tokens[0].tag == '\\n');\n      }\n\n      instructions.push(token);\n    }\n\n    if (stack.length > 0) {\n      throw new Error('missing closing tag: ' + stack.pop().n);\n    }\n\n    return instructions;\n  }\n\n  function isOpener(token, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].o == token.n) {\n        token.tag = '#';\n        return true;\n      }\n    }\n  }\n\n  function isCloser(close, open, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].c == close && tags[i].o == open) {\n        return true;\n      }\n    }\n  }\n\n  function stringifySubstitutions(obj) {\n    var items = [];\n    for (var key in obj) {\n      items.push('\"' + esc(key) + '\": function(c,p,t,i) {' + obj[key] + '}');\n    }\n    return \"{ \" + items.join(\",\") + \" }\";\n  }\n\n  function stringifyPartials(codeObj) {\n    var partials = [];\n    for (var key in codeObj.partials) {\n      partials.push('\"' + esc(key) + '\":{name:\"' + esc(codeObj.partials[key].name) + '\", ' + stringifyPartials(codeObj.partials[key]) + \"}\");\n    }\n    return \"partials: {\" + partials.join(\",\") + \"}, subs: \" + stringifySubstitutions(codeObj.subs);\n  }\n\n  Hogan.stringify = function(codeObj, text, options) {\n    return \"{code: function (c,p,i) { \" + Hogan.wrapMain(codeObj.code) + \" },\" + stringifyPartials(codeObj) +  \"}\";\n  }\n\n  var serialNo = 0;\n  Hogan.generate = function(tree, text, options) {\n    serialNo = 0;\n    var context = { code: '', subs: {}, partials: {} };\n    Hogan.walk(tree, context);\n\n    if (options.asString) {\n      return this.stringify(context, text, options);\n    }\n\n    return this.makeTemplate(context, text, options);\n  }\n\n  Hogan.wrapMain = function(code) {\n    return 'var t=this;t.b(i=i||\"\");' + code + 'return t.fl();';\n  }\n\n  Hogan.template = Hogan.Template;\n\n  Hogan.makeTemplate = function(codeObj, text, options) {\n    var template = this.makePartials(codeObj);\n    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));\n    return new this.template(template, text, this, options);\n  }\n\n  Hogan.makePartials = function(codeObj) {\n    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};\n    for (key in template.partials) {\n      template.partials[key] = this.makePartials(template.partials[key]);\n    }\n    for (key in codeObj.subs) {\n      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);\n    }\n    return template;\n  }\n\n  function esc(s) {\n    return s.replace(rSlash, '\\\\\\\\')\n            .replace(rQuot, '\\\\\\\"')\n            .replace(rNewline, '\\\\n')\n            .replace(rCr, '\\\\r')\n            .replace(rLineSep, '\\\\u2028')\n            .replace(rParagraphSep, '\\\\u2029');\n  }\n\n  function chooseMethod(s) {\n    return (~s.indexOf('.')) ? 'd' : 'f';\n  }\n\n  function createPartial(node, context) {\n    var prefix = \"<\" + (context.prefix || \"\");\n    var sym = prefix + node.n + serialNo++;\n    context.partials[sym] = {name: node.n, partials: {}};\n    context.code += 't.b(t.rp(\"' +  esc(sym) + '\",c,p,\"' + (node.indent || '') + '\"));';\n    return sym;\n  }\n\n  Hogan.codegen = {\n    '#': function(node, context) {\n      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),' +\n                      'c,p,0,' + node.i + ',' + node.end + ',\"' + node.otag + \" \" + node.ctag + '\")){' +\n                      't.rs(c,p,' + 'function(c,p,t){';\n      Hogan.walk(node.nodes, context);\n      context.code += '});c.pop();}';\n    },\n\n    '^': function(node, context) {\n      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),c,p,1,0,0,\"\")){';\n      Hogan.walk(node.nodes, context);\n      context.code += '};';\n    },\n\n    '>': createPartial,\n    '<': function(node, context) {\n      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};\n      Hogan.walk(node.nodes, ctx);\n      var template = context.partials[createPartial(node, context)];\n      template.subs = ctx.subs;\n      template.partials = ctx.partials;\n    },\n\n    '$': function(node, context) {\n      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};\n      Hogan.walk(node.nodes, ctx);\n      context.subs[node.n] = ctx.code;\n      if (!context.inPartial) {\n        context.code += 't.sub(\"' + esc(node.n) + '\",c,p,i);';\n      }\n    },\n\n    '\\n': function(node, context) {\n      context.code += write('\"\\\\n\"' + (node.last ? '' : ' + i'));\n    },\n\n    '_v': function(node, context) {\n      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n    },\n\n    '_t': function(node, context) {\n      context.code += write('\"' + esc(node.text) + '\"');\n    },\n\n    '{': tripleStache,\n\n    '&': tripleStache\n  }\n\n  function tripleStache(node, context) {\n    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n  }\n\n  function write(s) {\n    return 't.b(' + s + ');';\n  }\n\n  Hogan.walk = function(nodelist, context) {\n    var func;\n    for (var i = 0, l = nodelist.length; i < l; i++) {\n      func = Hogan.codegen[nodelist[i].tag];\n      func && func(nodelist[i], context);\n    }\n    return context;\n  }\n\n  Hogan.parse = function(tokens, text, options) {\n    options = options || {};\n    return buildTree(tokens, '', [], options.sectionTags || []);\n  }\n\n  Hogan.cache = {};\n\n  Hogan.cacheKey = function(text, options) {\n    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');\n  }\n\n  Hogan.compile = function(text, options) {\n    options = options || {};\n    var key = Hogan.cacheKey(text, options);\n    var template = this.cache[key];\n\n    if (template) {\n      var partials = template.partials;\n      for (var name in partials) {\n        delete partials[name].instance;\n      }\n      return template;\n    }\n\n    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);\n    return this.cache[key] = template;\n  }\n})(typeof exports !== 'undefined' ? exports : Hogan);\n"]},"metadata":{},"sourceType":"script"}