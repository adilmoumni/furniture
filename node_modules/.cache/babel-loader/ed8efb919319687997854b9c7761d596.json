{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { getIndexId, cleanUpValue, refineValue, getCurrentRefinementValue, getResults } from '../core/indexUtils';\nvar namespace = 'menu';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, \"\".concat(namespace, \".\").concat(getId(props)), null);\n\n  if (currentRefinement === '') {\n    return null;\n  }\n\n  return currentRefinement;\n}\n\nfunction getValue(name, props, searchState, context) {\n  var currentRefinement = getCurrentRefinement(props, searchState, context);\n  return name === currentRefinement ? '' : name;\n}\n\nfunction getLimit(_ref) {\n  var showMore = _ref.showMore,\n      limit = _ref.limit,\n      showMoreLimit = _ref.showMoreLimit;\n  return showMore ? showMoreLimit : limit;\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId(props);\n\n  var nextValue = _defineProperty({}, id, nextRefinement ? nextRefinement : '');\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, \"\".concat(namespace, \".\").concat(getId(props)));\n}\n\nvar defaultSortBy = ['count:desc', 'name:asc'];\n/**\n * connectMenu connector provides the logic to build a widget that will\n * give the user the ability to choose a single value for a specific facet.\n * @name connectMenu\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @kind connector\n * @propType {string} attribute - the name of the attribute in the record\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limit=10] - the minimum number of diplayed items\n * @propType {number} [showMoreLimit=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string} [defaultRefinement] - the value of the item selected by default\n * @propType {boolean} [searchable=false] - allow search inside values\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Menu can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaMenu',\n  propTypes: {\n    attribute: PropTypes.string.isRequired,\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    defaultRefinement: PropTypes.string,\n    transformItems: PropTypes.func,\n    searchable: PropTypes.bool,\n    facetOrdering: PropTypes.bool\n  },\n  defaultProps: {\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    facetOrdering: true\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults, meta, searchForFacetValuesResults) {\n    var attribute = props.attribute,\n        searchable = props.searchable,\n        indexContextValue = props.indexContextValue,\n        facetOrdering = props.facetOrdering;\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var canRefine = Boolean(results) && Boolean(results.getFacetByName(attribute));\n    var isFromSearch = Boolean(searchForFacetValuesResults && searchForFacetValuesResults[attribute] && searchForFacetValuesResults.query !== ''); // Search For Facet Values is not available with derived helper (used for multi index search)\n\n    if (searchable && indexContextValue) {\n      throw new Error('react-instantsearch: searching in *List is not available when used inside a' + ' multi index context');\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue\n        }),\n        isFromSearch: isFromSearch,\n        searchable: searchable,\n        canRefine: canRefine\n      };\n    }\n\n    var items;\n\n    if (isFromSearch) {\n      items = searchForFacetValuesResults[attribute].map(function (v) {\n        return {\n          label: v.value,\n          value: getValue(v.value, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          }),\n          _highlightResult: {\n            label: {\n              value: v.highlighted\n            }\n          },\n          count: v.count,\n          isRefined: v.isRefined\n        };\n      });\n    } else {\n      items = results.getFacetValues(attribute, {\n        sortBy: searchable ? undefined : defaultSortBy,\n        facetOrdering: facetOrdering\n      }).map(function (v) {\n        return {\n          label: v.name,\n          value: getValue(v.name, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          }),\n          count: v.count,\n          isRefined: v.isRefined\n        };\n      });\n    }\n\n    var transformedItems = props.transformItems ? props.transformItems(items) : items;\n    return {\n      items: transformedItems.slice(0, getLimit(props)),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      isFromSearch: isFromSearch,\n      searchable: searchable,\n      canRefine: transformedItems.length > 0\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  searchForFacetValues: function searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attribute,\n      query: nextRefinement,\n      maxFacetHits: getLimit(props)\n    };\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var attribute = props.attribute;\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(searchParameters.maxValuesPerFacet || 0, getLimit(props))\n    });\n    searchParameters = searchParameters.addDisjunctiveFacet(attribute);\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.addDisjunctiveFacetRefinement(attribute, currentRefinement);\n    }\n\n    return searchParameters;\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return {\n      id: id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      items: currentRefinement === null ? [] : [{\n        label: \"\".concat(props.attribute, \": \").concat(currentRefinement),\n        attribute: props.attribute,\n        value: function value(nextState) {\n          return _refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          });\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/react-instantsearch-core/dist/es/connectors/connectMenu.js"],"names":["_defineProperty","PropTypes","createConnector","getIndexId","cleanUpValue","refineValue","getCurrentRefinementValue","getResults","namespace","getId","props","attribute","getCurrentRefinement","searchState","context","currentRefinement","concat","getValue","name","getLimit","_ref","showMore","limit","showMoreLimit","_refine","nextRefinement","id","nextValue","resetPage","_cleanUp","defaultSortBy","displayName","propTypes","string","isRequired","bool","number","defaultRefinement","transformItems","func","searchable","facetOrdering","defaultProps","getProvidedProps","searchResults","meta","searchForFacetValuesResults","indexContextValue","results","ais","contextValue","multiIndexContext","canRefine","Boolean","getFacetByName","isFromSearch","query","Error","items","map","v","label","value","_highlightResult","highlighted","count","isRefined","getFacetValues","sortBy","undefined","transformedItems","slice","length","refine","searchForFacetValues","facetName","maxFacetHits","cleanUp","getSearchParameters","searchParameters","setQueryParameters","maxValuesPerFacet","Math","max","addDisjunctiveFacet","addDisjunctiveFacetRefinement","getMetadata","index","nextState"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { getIndexId, cleanUpValue, refineValue, getCurrentRefinementValue, getResults } from '../core/indexUtils';\nvar namespace = 'menu';\n\nfunction getId(props) {\n  return props.attribute;\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var currentRefinement = getCurrentRefinementValue(props, searchState, context, \"\".concat(namespace, \".\").concat(getId(props)), null);\n\n  if (currentRefinement === '') {\n    return null;\n  }\n\n  return currentRefinement;\n}\n\nfunction getValue(name, props, searchState, context) {\n  var currentRefinement = getCurrentRefinement(props, searchState, context);\n  return name === currentRefinement ? '' : name;\n}\n\nfunction getLimit(_ref) {\n  var showMore = _ref.showMore,\n      limit = _ref.limit,\n      showMoreLimit = _ref.showMoreLimit;\n  return showMore ? showMoreLimit : limit;\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId(props);\n\n  var nextValue = _defineProperty({}, id, nextRefinement ? nextRefinement : '');\n\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, \"\".concat(namespace, \".\").concat(getId(props)));\n}\n\nvar defaultSortBy = ['count:desc', 'name:asc'];\n/**\n * connectMenu connector provides the logic to build a widget that will\n * give the user the ability to choose a single value for a specific facet.\n * @name connectMenu\n * @requirements The attribute passed to the `attribute` prop must be present in \"attributes for faceting\"\n * on the Algolia dashboard or configured as `attributesForFaceting` via a set settings call to the Algolia API.\n * @kind connector\n * @propType {string} attribute - the name of the attribute in the record\n * @propType {boolean} [showMore=false] - true if the component should display a button that will expand the number of items\n * @propType {number} [limit=10] - the minimum number of diplayed items\n * @propType {number} [showMoreLimit=20] - the maximun number of displayed items. Only used when showMore is set to `true`\n * @propType {string} [defaultRefinement] - the value of the item selected by default\n * @propType {boolean} [searchable=false] - allow search inside values\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{count: number, isRefined: boolean, label: string, value: string}>} items - the list of items the Menu can display.\n * @providedPropType {function} searchForItems - a function to toggle a search inside items values\n * @providedPropType {boolean} isFromSearch - a boolean that says if the `items` props contains facet values from the global search or from the search inside items.\n */\n\nexport default createConnector({\n  displayName: 'AlgoliaMenu',\n  propTypes: {\n    attribute: PropTypes.string.isRequired,\n    showMore: PropTypes.bool,\n    limit: PropTypes.number,\n    showMoreLimit: PropTypes.number,\n    defaultRefinement: PropTypes.string,\n    transformItems: PropTypes.func,\n    searchable: PropTypes.bool,\n    facetOrdering: PropTypes.bool\n  },\n  defaultProps: {\n    showMore: false,\n    limit: 10,\n    showMoreLimit: 20,\n    facetOrdering: true\n  },\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults, meta, searchForFacetValuesResults) {\n    var attribute = props.attribute,\n        searchable = props.searchable,\n        indexContextValue = props.indexContextValue,\n        facetOrdering = props.facetOrdering;\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    var canRefine = Boolean(results) && Boolean(results.getFacetByName(attribute));\n    var isFromSearch = Boolean(searchForFacetValuesResults && searchForFacetValuesResults[attribute] && searchForFacetValuesResults.query !== ''); // Search For Facet Values is not available with derived helper (used for multi index search)\n\n    if (searchable && indexContextValue) {\n      throw new Error('react-instantsearch: searching in *List is not available when used inside a' + ' multi index context');\n    }\n\n    if (!canRefine) {\n      return {\n        items: [],\n        currentRefinement: getCurrentRefinement(props, searchState, {\n          ais: props.contextValue,\n          multiIndexContext: props.indexContextValue\n        }),\n        isFromSearch: isFromSearch,\n        searchable: searchable,\n        canRefine: canRefine\n      };\n    }\n\n    var items;\n\n    if (isFromSearch) {\n      items = searchForFacetValuesResults[attribute].map(function (v) {\n        return {\n          label: v.value,\n          value: getValue(v.value, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          }),\n          _highlightResult: {\n            label: {\n              value: v.highlighted\n            }\n          },\n          count: v.count,\n          isRefined: v.isRefined\n        };\n      });\n    } else {\n      items = results.getFacetValues(attribute, {\n        sortBy: searchable ? undefined : defaultSortBy,\n        facetOrdering: facetOrdering\n      }).map(function (v) {\n        return {\n          label: v.name,\n          value: getValue(v.name, props, searchState, {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          }),\n          count: v.count,\n          isRefined: v.isRefined\n        };\n      });\n    }\n\n    var transformedItems = props.transformItems ? props.transformItems(items) : items;\n    return {\n      items: transformedItems.slice(0, getLimit(props)),\n      currentRefinement: getCurrentRefinement(props, searchState, {\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      isFromSearch: isFromSearch,\n      searchable: searchable,\n      canRefine: transformedItems.length > 0\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  searchForFacetValues: function searchForFacetValues(props, searchState, nextRefinement) {\n    return {\n      facetName: props.attribute,\n      query: nextRefinement,\n      maxFacetHits: getLimit(props)\n    };\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var attribute = props.attribute;\n    searchParameters = searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(searchParameters.maxValuesPerFacet || 0, getLimit(props))\n    });\n    searchParameters = searchParameters.addDisjunctiveFacet(attribute);\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n\n    if (currentRefinement !== null) {\n      searchParameters = searchParameters.addDisjunctiveFacetRefinement(attribute, currentRefinement);\n    }\n\n    return searchParameters;\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    return {\n      id: id,\n      index: getIndexId({\n        ais: props.contextValue,\n        multiIndexContext: props.indexContextValue\n      }),\n      items: currentRefinement === null ? [] : [{\n        label: \"\".concat(props.attribute, \": \").concat(currentRefinement),\n        attribute: props.attribute,\n        value: function value(nextState) {\n          return _refine(props, nextState, '', {\n            ais: props.contextValue,\n            multiIndexContext: props.indexContextValue\n          });\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});"]},"metadata":{},"sourceType":"module"}