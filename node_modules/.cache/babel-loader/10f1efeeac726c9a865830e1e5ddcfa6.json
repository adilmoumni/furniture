{"ast":null,"code":"/**\n * This implementation is taken from Lodash implementation.\n * See: https://github.com/lodash/lodash/blob/4.17.11-npm/escape.js\n */\n// Used to map characters to HTML entities.\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n}; // Used to match HTML entities and HTML characters.\n\nvar regexUnescapedHtml = /[&<>\"']/g;\nvar regexHasUnescapedHtml = RegExp(regexUnescapedHtml.source);\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n */\n\nfunction escape(value) {\n  return value && regexHasUnescapedHtml.test(value) ? value.replace(regexUnescapedHtml, function (character) {\n    return htmlEscapes[character];\n  }) : value;\n}\n\nexport default escape;","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/lib/utils/escape.js"],"names":["htmlEscapes","regexUnescapedHtml","regexHasUnescapedHtml","RegExp","source","escape","value","test","replace","character"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GAAG;AAChB,OAAK,OADW;AAEhB,OAAK,MAFW;AAGhB,OAAK,MAHW;AAIhB,OAAK,QAJW;AAKhB,OAAK;AALW,CAAlB,C,CAMG;;AAEH,IAAIC,kBAAkB,GAAG,UAAzB;AACA,IAAIC,qBAAqB,GAAGC,MAAM,CAACF,kBAAkB,CAACG,MAApB,CAAlC;AACA;AACA;AACA;AACA;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,SAAOA,KAAK,IAAIJ,qBAAqB,CAACK,IAAtB,CAA2BD,KAA3B,CAAT,GAA6CA,KAAK,CAACE,OAAN,CAAcP,kBAAd,EAAkC,UAAUQ,SAAV,EAAqB;AACzG,WAAOT,WAAW,CAACS,SAAD,CAAlB;AACD,GAFmD,CAA7C,GAEFH,KAFL;AAGD;;AAED,eAAeD,MAAf","sourcesContent":["/**\n * This implementation is taken from Lodash implementation.\n * See: https://github.com/lodash/lodash/blob/4.17.11-npm/escape.js\n */\n// Used to map characters to HTML entities.\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n}; // Used to match HTML entities and HTML characters.\n\nvar regexUnescapedHtml = /[&<>\"']/g;\nvar regexHasUnescapedHtml = RegExp(regexUnescapedHtml.source);\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n */\n\nfunction escape(value) {\n  return value && regexHasUnescapedHtml.test(value) ? value.replace(regexUnescapedHtml, function (character) {\n    return htmlEscapes[character];\n  }) : value;\n}\n\nexport default escape;"]},"metadata":{},"sourceType":"module"}