{"ast":null,"code":"/** @jsx h */\nimport { h } from 'preact';\nimport { deserializePayload } from '../utils';\nimport { readDataAttributes, hasDataAttributes } from '../../helpers/insights';\n\nvar findInsightsTarget = function findInsightsTarget(startElement, endElement, validator) {\n  var element = startElement;\n\n  while (element && !validator(element)) {\n    if (element === endElement) {\n      return null;\n    }\n\n    element = element.parentElement;\n  }\n\n  return element;\n};\n\nvar parseInsightsEvent = function parseInsightsEvent(element) {\n  var serializedPayload = element.getAttribute('data-insights-event');\n\n  if (typeof serializedPayload !== 'string') {\n    throw new Error('The insights middleware expects `data-insights-event` to be a base64-encoded JSON string.');\n  }\n\n  try {\n    return deserializePayload(serializedPayload);\n  } catch (error) {\n    throw new Error('The insights middleware was unable to parse `data-insights-event`.');\n  }\n};\n\nvar insightsListener = function insightsListener(BaseComponent) {\n  function WithInsightsListener(props) {\n    var handleClick = function handleClick(event) {\n      if (props.sendEvent) {\n        // new way with insights middleware\n        var targetWithEvent = findInsightsTarget(event.target, event.currentTarget, function (element) {\n          return element.hasAttribute('data-insights-event');\n        });\n\n        if (targetWithEvent) {\n          var payload = parseInsightsEvent(targetWithEvent);\n          payload.forEach(function (single) {\n            return props.sendEvent(single);\n          });\n        }\n      } // old way, e.g. instantsearch.insights(\"clickedObjectIDsAfterSearch\", { .. })\n\n\n      var insightsTarget = findInsightsTarget(event.target, event.currentTarget, function (element) {\n        return hasDataAttributes(element);\n      });\n\n      if (insightsTarget) {\n        var _readDataAttributes = readDataAttributes(insightsTarget),\n            method = _readDataAttributes.method,\n            _payload = _readDataAttributes.payload;\n\n        props.insights(method, _payload);\n      }\n    };\n\n    return h(\"div\", {\n      onClick: handleClick\n    }, h(BaseComponent, props));\n  }\n\n  return WithInsightsListener;\n};\n\nexport default insightsListener;","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/lib/insights/listener.js"],"names":["h","deserializePayload","readDataAttributes","hasDataAttributes","findInsightsTarget","startElement","endElement","validator","element","parentElement","parseInsightsEvent","serializedPayload","getAttribute","Error","error","insightsListener","BaseComponent","WithInsightsListener","props","handleClick","event","sendEvent","targetWithEvent","target","currentTarget","hasAttribute","payload","forEach","single","insightsTarget","_readDataAttributes","method","_payload","insights","onClick"],"mappings":"AAAA;AACA,SAASA,CAAT,QAAkB,QAAlB;AACA,SAASC,kBAAT,QAAmC,UAAnC;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,QAAsD,wBAAtD;;AAEA,IAAIC,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,YAA5B,EAA0CC,UAA1C,EAAsDC,SAAtD,EAAiE;AACxF,MAAIC,OAAO,GAAGH,YAAd;;AAEA,SAAOG,OAAO,IAAI,CAACD,SAAS,CAACC,OAAD,CAA5B,EAAuC;AACrC,QAAIA,OAAO,KAAKF,UAAhB,EAA4B;AAC1B,aAAO,IAAP;AACD;;AAEDE,IAAAA,OAAO,GAAGA,OAAO,CAACC,aAAlB;AACD;;AAED,SAAOD,OAAP;AACD,CAZD;;AAcA,IAAIE,kBAAkB,GAAG,SAASA,kBAAT,CAA4BF,OAA5B,EAAqC;AAC5D,MAAIG,iBAAiB,GAAGH,OAAO,CAACI,YAAR,CAAqB,qBAArB,CAAxB;;AAEA,MAAI,OAAOD,iBAAP,KAA6B,QAAjC,EAA2C;AACzC,UAAM,IAAIE,KAAJ,CAAU,2FAAV,CAAN;AACD;;AAED,MAAI;AACF,WAAOZ,kBAAkB,CAACU,iBAAD,CAAzB;AACD,GAFD,CAEE,OAAOG,KAAP,EAAc;AACd,UAAM,IAAID,KAAJ,CAAU,oEAAV,CAAN;AACD;AACF,CAZD;;AAcA,IAAIE,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,aAA1B,EAAyC;AAC9D,WAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,QAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC5C,UAAIF,KAAK,CAACG,SAAV,EAAqB;AACnB;AACA,YAAIC,eAAe,GAAGlB,kBAAkB,CAACgB,KAAK,CAACG,MAAP,EAAeH,KAAK,CAACI,aAArB,EAAoC,UAAUhB,OAAV,EAAmB;AAC7F,iBAAOA,OAAO,CAACiB,YAAR,CAAqB,qBAArB,CAAP;AACD,SAFuC,CAAxC;;AAIA,YAAIH,eAAJ,EAAqB;AACnB,cAAII,OAAO,GAAGhB,kBAAkB,CAACY,eAAD,CAAhC;AACAI,UAAAA,OAAO,CAACC,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChC,mBAAOV,KAAK,CAACG,SAAN,CAAgBO,MAAhB,CAAP;AACD,WAFD;AAGD;AACF,OAb2C,CAa1C;;;AAGF,UAAIC,cAAc,GAAGzB,kBAAkB,CAACgB,KAAK,CAACG,MAAP,EAAeH,KAAK,CAACI,aAArB,EAAoC,UAAUhB,OAAV,EAAmB;AAC5F,eAAOL,iBAAiB,CAACK,OAAD,CAAxB;AACD,OAFsC,CAAvC;;AAIA,UAAIqB,cAAJ,EAAoB;AAClB,YAAIC,mBAAmB,GAAG5B,kBAAkB,CAAC2B,cAAD,CAA5C;AAAA,YACIE,MAAM,GAAGD,mBAAmB,CAACC,MADjC;AAAA,YAEIC,QAAQ,GAAGF,mBAAmB,CAACJ,OAFnC;;AAIAR,QAAAA,KAAK,CAACe,QAAN,CAAeF,MAAf,EAAuBC,QAAvB;AACD;AACF,KA3BD;;AA6BA,WAAOhC,CAAC,CAAC,KAAD,EAAQ;AACdkC,MAAAA,OAAO,EAAEf;AADK,KAAR,EAELnB,CAAC,CAACgB,aAAD,EAAgBE,KAAhB,CAFI,CAAR;AAGD;;AAED,SAAOD,oBAAP;AACD,CArCD;;AAuCA,eAAeF,gBAAf","sourcesContent":["/** @jsx h */\nimport { h } from 'preact';\nimport { deserializePayload } from '../utils';\nimport { readDataAttributes, hasDataAttributes } from '../../helpers/insights';\n\nvar findInsightsTarget = function findInsightsTarget(startElement, endElement, validator) {\n  var element = startElement;\n\n  while (element && !validator(element)) {\n    if (element === endElement) {\n      return null;\n    }\n\n    element = element.parentElement;\n  }\n\n  return element;\n};\n\nvar parseInsightsEvent = function parseInsightsEvent(element) {\n  var serializedPayload = element.getAttribute('data-insights-event');\n\n  if (typeof serializedPayload !== 'string') {\n    throw new Error('The insights middleware expects `data-insights-event` to be a base64-encoded JSON string.');\n  }\n\n  try {\n    return deserializePayload(serializedPayload);\n  } catch (error) {\n    throw new Error('The insights middleware was unable to parse `data-insights-event`.');\n  }\n};\n\nvar insightsListener = function insightsListener(BaseComponent) {\n  function WithInsightsListener(props) {\n    var handleClick = function handleClick(event) {\n      if (props.sendEvent) {\n        // new way with insights middleware\n        var targetWithEvent = findInsightsTarget(event.target, event.currentTarget, function (element) {\n          return element.hasAttribute('data-insights-event');\n        });\n\n        if (targetWithEvent) {\n          var payload = parseInsightsEvent(targetWithEvent);\n          payload.forEach(function (single) {\n            return props.sendEvent(single);\n          });\n        }\n      } // old way, e.g. instantsearch.insights(\"clickedObjectIDsAfterSearch\", { .. })\n\n\n      var insightsTarget = findInsightsTarget(event.target, event.currentTarget, function (element) {\n        return hasDataAttributes(element);\n      });\n\n      if (insightsTarget) {\n        var _readDataAttributes = readDataAttributes(insightsTarget),\n            method = _readDataAttributes.method,\n            _payload = _readDataAttributes.payload;\n\n        props.insights(method, _payload);\n      }\n    };\n\n    return h(\"div\", {\n      onClick: handleClick\n    }, h(BaseComponent, props));\n  }\n\n  return WithInsightsListener;\n};\n\nexport default insightsListener;"]},"metadata":{},"sourceType":"module"}