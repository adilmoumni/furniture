{"ast":null,"code":"/**\n * Clears the refinements of a SearchParameters object based on rules provided.\n * The included attributes list is applied before the excluded attributes list. If the list\n * is not provided, this list of all the currently refined attributes is used as included attributes.\n * @param {object} $0 parameters\n * @param {Helper} $0.helper instance of the Helper\n * @param {string[]} [$0.attributesToClear = []] list of parameters to clear\n * @returns {SearchParameters} search parameters with refinements cleared\n */\nfunction clearRefinements(_ref) {\n  var helper = _ref.helper,\n      _ref$attributesToClea = _ref.attributesToClear,\n      attributesToClear = _ref$attributesToClea === void 0 ? [] : _ref$attributesToClea;\n  var finalState = helper.state.setPage(0);\n  finalState = attributesToClear.reduce(function (state, attribute) {\n    if (finalState.isNumericRefined(attribute)) {\n      return state.removeNumericRefinement(attribute);\n    }\n\n    if (finalState.isHierarchicalFacet(attribute)) {\n      return state.removeHierarchicalFacetRefinement(attribute);\n    }\n\n    if (finalState.isDisjunctiveFacet(attribute)) {\n      return state.removeDisjunctiveFacetRefinement(attribute);\n    }\n\n    if (finalState.isConjunctiveFacet(attribute)) {\n      return state.removeFacetRefinement(attribute);\n    }\n\n    return state;\n  }, finalState);\n\n  if (attributesToClear.indexOf('query') !== -1) {\n    finalState = finalState.setQuery('');\n  }\n\n  return finalState;\n}\n\nexport default clearRefinements;","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/lib/utils/clearRefinements.js"],"names":["clearRefinements","_ref","helper","_ref$attributesToClea","attributesToClear","finalState","state","setPage","reduce","attribute","isNumericRefined","removeNumericRefinement","isHierarchicalFacet","removeHierarchicalFacetRefinement","isDisjunctiveFacet","removeDisjunctiveFacetRefinement","isConjunctiveFacet","removeFacetRefinement","indexOf","setQuery"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,qBAAqB,GAAGF,IAAI,CAACG,iBADjC;AAAA,MAEIA,iBAAiB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAFhE;AAGA,MAAIE,UAAU,GAAGH,MAAM,CAACI,KAAP,CAAaC,OAAb,CAAqB,CAArB,CAAjB;AACAF,EAAAA,UAAU,GAAGD,iBAAiB,CAACI,MAAlB,CAAyB,UAAUF,KAAV,EAAiBG,SAAjB,EAA4B;AAChE,QAAIJ,UAAU,CAACK,gBAAX,CAA4BD,SAA5B,CAAJ,EAA4C;AAC1C,aAAOH,KAAK,CAACK,uBAAN,CAA8BF,SAA9B,CAAP;AACD;;AAED,QAAIJ,UAAU,CAACO,mBAAX,CAA+BH,SAA/B,CAAJ,EAA+C;AAC7C,aAAOH,KAAK,CAACO,iCAAN,CAAwCJ,SAAxC,CAAP;AACD;;AAED,QAAIJ,UAAU,CAACS,kBAAX,CAA8BL,SAA9B,CAAJ,EAA8C;AAC5C,aAAOH,KAAK,CAACS,gCAAN,CAAuCN,SAAvC,CAAP;AACD;;AAED,QAAIJ,UAAU,CAACW,kBAAX,CAA8BP,SAA9B,CAAJ,EAA8C;AAC5C,aAAOH,KAAK,CAACW,qBAAN,CAA4BR,SAA5B,CAAP;AACD;;AAED,WAAOH,KAAP;AACD,GAlBY,EAkBVD,UAlBU,CAAb;;AAoBA,MAAID,iBAAiB,CAACc,OAAlB,CAA0B,OAA1B,MAAuC,CAAC,CAA5C,EAA+C;AAC7Cb,IAAAA,UAAU,GAAGA,UAAU,CAACc,QAAX,CAAoB,EAApB,CAAb;AACD;;AAED,SAAOd,UAAP;AACD;;AAED,eAAeL,gBAAf","sourcesContent":["/**\n * Clears the refinements of a SearchParameters object based on rules provided.\n * The included attributes list is applied before the excluded attributes list. If the list\n * is not provided, this list of all the currently refined attributes is used as included attributes.\n * @param {object} $0 parameters\n * @param {Helper} $0.helper instance of the Helper\n * @param {string[]} [$0.attributesToClear = []] list of parameters to clear\n * @returns {SearchParameters} search parameters with refinements cleared\n */\nfunction clearRefinements(_ref) {\n  var helper = _ref.helper,\n      _ref$attributesToClea = _ref.attributesToClear,\n      attributesToClear = _ref$attributesToClea === void 0 ? [] : _ref$attributesToClea;\n  var finalState = helper.state.setPage(0);\n  finalState = attributesToClear.reduce(function (state, attribute) {\n    if (finalState.isNumericRefined(attribute)) {\n      return state.removeNumericRefinement(attribute);\n    }\n\n    if (finalState.isHierarchicalFacet(attribute)) {\n      return state.removeHierarchicalFacetRefinement(attribute);\n    }\n\n    if (finalState.isDisjunctiveFacet(attribute)) {\n      return state.removeDisjunctiveFacetRefinement(attribute);\n    }\n\n    if (finalState.isConjunctiveFacet(attribute)) {\n      return state.removeFacetRefinement(attribute);\n    }\n\n    return state;\n  }, finalState);\n\n  if (attributesToClear.indexOf('query') !== -1) {\n    finalState = finalState.setQuery('');\n  }\n\n  return finalState;\n}\n\nexport default clearRefinements;"]},"metadata":{},"sourceType":"module"}