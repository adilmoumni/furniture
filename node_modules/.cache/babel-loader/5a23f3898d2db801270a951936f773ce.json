{"ast":null,"code":"// Debounce a function call to the trailing edge.\n// The debounced function returns a promise.\nexport function debounce(func, wait) {\n  var lastTimeout = null;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    } // @ts-ignore-next-line\n\n\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      if (lastTimeout) {\n        clearTimeout(lastTimeout);\n      }\n\n      lastTimeout = setTimeout(function () {\n        lastTimeout = null;\n        Promise.resolve(func.apply(that, args)).then(resolve).catch(reject);\n      }, wait);\n    });\n  };\n}","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/react-instantsearch-dom/dist/es/lib/debounce.js"],"names":["debounce","func","wait","lastTimeout","_len","arguments","length","args","Array","_key","that","Promise","resolve","reject","clearTimeout","setTimeout","apply","then","catch"],"mappings":"AAAA;AACA;AACA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AACnC,MAAIC,WAAW,GAAG,IAAlB;AACA,SAAO,YAAY;AACjB,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD,KAHgB,CAKjB;;;AACA,QAAIC,IAAI,GAAG,IAAX;AACA,WAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,UAAIV,WAAJ,EAAiB;AACfW,QAAAA,YAAY,CAACX,WAAD,CAAZ;AACD;;AAEDA,MAAAA,WAAW,GAAGY,UAAU,CAAC,YAAY;AACnCZ,QAAAA,WAAW,GAAG,IAAd;AACAQ,QAAAA,OAAO,CAACC,OAAR,CAAgBX,IAAI,CAACe,KAAL,CAAWN,IAAX,EAAiBH,IAAjB,CAAhB,EAAwCU,IAAxC,CAA6CL,OAA7C,EAAsDM,KAAtD,CAA4DL,MAA5D;AACD,OAHuB,EAGrBX,IAHqB,CAAxB;AAID,KATM,CAAP;AAUD,GAjBD;AAkBD","sourcesContent":["// Debounce a function call to the trailing edge.\n// The debounced function returns a promise.\nexport function debounce(func, wait) {\n  var lastTimeout = null;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    // @ts-ignore-next-line\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      if (lastTimeout) {\n        clearTimeout(lastTimeout);\n      }\n\n      lastTimeout = setTimeout(function () {\n        lastTimeout = null;\n        Promise.resolve(func.apply(that, args)).then(resolve).catch(reject);\n      }, wait);\n    });\n  };\n}"]},"metadata":{},"sourceType":"module"}