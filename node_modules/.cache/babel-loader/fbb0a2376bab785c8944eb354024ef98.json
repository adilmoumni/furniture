{"ast":null,"code":"// copied from\n// https://github.com/algolia/autocomplete.js/blob/307a7acc4283e10a19cb7d067f04f1bea79dc56f/packages/autocomplete-core/src/utils/createConcurrentSafePromise.ts#L1:L1\n\n/**\n * Creates a runner that executes promises in a concurrent-safe way.\n *\n * This is useful to prevent older promises to resolve after a newer promise,\n * otherwise resulting in stale resolved values.\n */\nexport function createConcurrentSafePromise() {\n  var basePromiseId = -1;\n  var latestResolvedId = -1;\n  var latestResolvedValue = undefined;\n  return function runConcurrentSafePromise(promise) {\n    var currentPromiseId = ++basePromiseId;\n    return Promise.resolve(promise).then(function (x) {\n      // The promise might take too long to resolve and get outdated. This would\n      // result in resolving stale values.\n      // When this happens, we ignore the promise value and return the one\n      // coming from the latest resolved value.\n      //\n      // +----------------------------------+\n      // |        100ms                     |\n      // | run(1) +--->  R1                 |\n      // |        300ms                     |\n      // | run(2) +-------------> R2 (SKIP) |\n      // |        200ms                     |\n      // | run(3) +--------> R3             |\n      // +----------------------------------+\n      if (latestResolvedValue && currentPromiseId < latestResolvedId) {\n        return latestResolvedValue;\n      }\n\n      latestResolvedId = currentPromiseId;\n      latestResolvedValue = x;\n      return x;\n    });\n  };\n}","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/lib/utils/createConcurrentSafePromise.js"],"names":["createConcurrentSafePromise","basePromiseId","latestResolvedId","latestResolvedValue","undefined","runConcurrentSafePromise","promise","currentPromiseId","Promise","resolve","then","x"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,2BAAT,GAAuC;AAC5C,MAAIC,aAAa,GAAG,CAAC,CAArB;AACA,MAAIC,gBAAgB,GAAG,CAAC,CAAxB;AACA,MAAIC,mBAAmB,GAAGC,SAA1B;AACA,SAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;AAChD,QAAIC,gBAAgB,GAAG,EAAEN,aAAzB;AACA,WAAOO,OAAO,CAACC,OAAR,CAAgBH,OAAhB,EAAyBI,IAAzB,CAA8B,UAAUC,CAAV,EAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAIR,mBAAmB,IAAII,gBAAgB,GAAGL,gBAA9C,EAAgE;AAC9D,eAAOC,mBAAP;AACD;;AAEDD,MAAAA,gBAAgB,GAAGK,gBAAnB;AACAJ,MAAAA,mBAAmB,GAAGQ,CAAtB;AACA,aAAOA,CAAP;AACD,KArBM,CAAP;AAsBD,GAxBD;AAyBD","sourcesContent":["// copied from\n// https://github.com/algolia/autocomplete.js/blob/307a7acc4283e10a19cb7d067f04f1bea79dc56f/packages/autocomplete-core/src/utils/createConcurrentSafePromise.ts#L1:L1\n\n/**\n * Creates a runner that executes promises in a concurrent-safe way.\n *\n * This is useful to prevent older promises to resolve after a newer promise,\n * otherwise resulting in stale resolved values.\n */\nexport function createConcurrentSafePromise() {\n  var basePromiseId = -1;\n  var latestResolvedId = -1;\n  var latestResolvedValue = undefined;\n  return function runConcurrentSafePromise(promise) {\n    var currentPromiseId = ++basePromiseId;\n    return Promise.resolve(promise).then(function (x) {\n      // The promise might take too long to resolve and get outdated. This would\n      // result in resolving stale values.\n      // When this happens, we ignore the promise value and return the one\n      // coming from the latest resolved value.\n      //\n      // +----------------------------------+\n      // |        100ms                     |\n      // | run(1) +--->  R1                 |\n      // |        300ms                     |\n      // | run(2) +-------------> R2 (SKIP) |\n      // |        200ms                     |\n      // | run(3) +--------> R3             |\n      // +----------------------------------+\n      if (latestResolvedValue && currentPromiseId < latestResolvedId) {\n        return latestResolvedValue;\n      }\n\n      latestResolvedId = currentPromiseId;\n      latestResolvedValue = x;\n      return x;\n    });\n  };\n}"]},"metadata":{},"sourceType":"module"}