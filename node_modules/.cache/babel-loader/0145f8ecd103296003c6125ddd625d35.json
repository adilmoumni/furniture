{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { warning, serializePayload, deserializePayload } from '../lib/utils';\nexport function readDataAttributes(domElement) {\n  var method = domElement.getAttribute('data-insights-method');\n  var serializedPayload = domElement.getAttribute('data-insights-payload');\n\n  if (typeof serializedPayload !== 'string') {\n    throw new Error('The insights helper expects `data-insights-payload` to be a base64-encoded JSON string.');\n  }\n\n  try {\n    var payload = deserializePayload(serializedPayload);\n    return {\n      method: method,\n      payload: payload\n    };\n  } catch (error) {\n    throw new Error('The insights helper was unable to parse `data-insights-payload`.');\n  }\n}\nexport function hasDataAttributes(domElement) {\n  return domElement.hasAttribute('data-insights-method');\n}\nexport function writeDataAttributes(_ref) {\n  var method = _ref.method,\n      payload = _ref.payload;\n\n  if (_typeof(payload) !== 'object') {\n    throw new Error(\"The insights helper expects the payload to be an object.\");\n  }\n\n  var serializedPayload;\n\n  try {\n    serializedPayload = serializePayload(payload);\n  } catch (error) {\n    throw new Error(\"Could not JSON serialize the payload object.\");\n  }\n\n  return \"data-insights-method=\\\"\".concat(method, \"\\\" data-insights-payload=\\\"\").concat(serializedPayload, \"\\\"\");\n}\n/**\n * @deprecated This function will be still supported in 4.x releases, but not further. It is replaced by the `insights` middleware. For more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\n */\n\nexport default function insights(method, payload) {\n  process.env.NODE_ENV === 'development' ? warning(false, \"`insights` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\") : void 0;\n  return writeDataAttributes({\n    method: method,\n    payload: payload\n  });\n}","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/helpers/insights.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","warning","serializePayload","deserializePayload","readDataAttributes","domElement","method","getAttribute","serializedPayload","Error","payload","error","hasDataAttributes","hasAttribute","writeDataAttributes","_ref","concat","insights","process","env","NODE_ENV"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,SAASK,OAAT,EAAkBC,gBAAlB,EAAoCC,kBAApC,QAA8D,cAA9D;AACA,OAAO,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;AAC7C,MAAIC,MAAM,GAAGD,UAAU,CAACE,YAAX,CAAwB,sBAAxB,CAAb;AACA,MAAIC,iBAAiB,GAAGH,UAAU,CAACE,YAAX,CAAwB,uBAAxB,CAAxB;;AAEA,MAAI,OAAOC,iBAAP,KAA6B,QAAjC,EAA2C;AACzC,UAAM,IAAIC,KAAJ,CAAU,yFAAV,CAAN;AACD;;AAED,MAAI;AACF,QAAIC,OAAO,GAAGP,kBAAkB,CAACK,iBAAD,CAAhC;AACA,WAAO;AACLF,MAAAA,MAAM,EAAEA,MADH;AAELI,MAAAA,OAAO,EAAEA;AAFJ,KAAP;AAID,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAM,IAAIF,KAAJ,CAAU,kEAAV,CAAN;AACD;AACF;AACD,OAAO,SAASG,iBAAT,CAA2BP,UAA3B,EAAuC;AAC5C,SAAOA,UAAU,CAACQ,YAAX,CAAwB,sBAAxB,CAAP;AACD;AACD,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AACxC,MAAIT,MAAM,GAAGS,IAAI,CAACT,MAAlB;AAAA,MACII,OAAO,GAAGK,IAAI,CAACL,OADnB;;AAGA,MAAIf,OAAO,CAACe,OAAD,CAAP,KAAqB,QAAzB,EAAmC;AACjC,UAAM,IAAID,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,MAAID,iBAAJ;;AAEA,MAAI;AACFA,IAAAA,iBAAiB,GAAGN,gBAAgB,CAACQ,OAAD,CAApC;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd,UAAM,IAAIF,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAO,0BAA0BO,MAA1B,CAAiCV,MAAjC,EAAyC,6BAAzC,EAAwEU,MAAxE,CAA+ER,iBAA/E,EAAkG,IAAlG,CAAP;AACD;AACD;AACA;AACA;;AAEA,eAAe,SAASS,QAAT,CAAkBX,MAAlB,EAA0BI,OAA1B,EAAmC;AAChDQ,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCnB,OAAO,CAAC,KAAD,EAAQ,8VAAR,CAAhD,GAA0Z,KAAK,CAA/Z;AACA,SAAOa,mBAAmB,CAAC;AACzBR,IAAAA,MAAM,EAAEA,MADiB;AAEzBI,IAAAA,OAAO,EAAEA;AAFgB,GAAD,CAA1B;AAID","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { warning, serializePayload, deserializePayload } from '../lib/utils';\nexport function readDataAttributes(domElement) {\n  var method = domElement.getAttribute('data-insights-method');\n  var serializedPayload = domElement.getAttribute('data-insights-payload');\n\n  if (typeof serializedPayload !== 'string') {\n    throw new Error('The insights helper expects `data-insights-payload` to be a base64-encoded JSON string.');\n  }\n\n  try {\n    var payload = deserializePayload(serializedPayload);\n    return {\n      method: method,\n      payload: payload\n    };\n  } catch (error) {\n    throw new Error('The insights helper was unable to parse `data-insights-payload`.');\n  }\n}\nexport function hasDataAttributes(domElement) {\n  return domElement.hasAttribute('data-insights-method');\n}\nexport function writeDataAttributes(_ref) {\n  var method = _ref.method,\n      payload = _ref.payload;\n\n  if (_typeof(payload) !== 'object') {\n    throw new Error(\"The insights helper expects the payload to be an object.\");\n  }\n\n  var serializedPayload;\n\n  try {\n    serializedPayload = serializePayload(payload);\n  } catch (error) {\n    throw new Error(\"Could not JSON serialize the payload object.\");\n  }\n\n  return \"data-insights-method=\\\"\".concat(method, \"\\\" data-insights-payload=\\\"\").concat(serializedPayload, \"\\\"\");\n}\n/**\n * @deprecated This function will be still supported in 4.x releases, but not further. It is replaced by the `insights` middleware. For more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\n */\n\nexport default function insights(method, payload) {\n  process.env.NODE_ENV === 'development' ? warning(false, \"`insights` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\") : void 0;\n  return writeDataAttributes({\n    method: method,\n    payload: payload\n  });\n}"]},"metadata":{},"sourceType":"module"}