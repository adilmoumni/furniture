{"ast":null,"code":"import { createSuitMixin as t } from \"../mixins/suit.js\";\nimport { createWidgetMixin as e } from \"../mixins/widget.js\";\nimport { _objectSpread as s } from \"../util/polyfills.js\";\nimport a from \"../connectors/connectStateResults.js\";\nexport default {\n  render: function () {\n    var t = this,\n        e = t.$createElement,\n        s = t._self._c || e;\n    return t.state && t.state.state && t.state.results ? s(\"div\", {\n      class: t.suit()\n    }, [t._t(\"default\", [s(\"p\", [t._v(\" Use this component to have a different layout based on a certain state. \")]), t._v(\" \"), s(\"p\", [t._v(\" Fill in the slot, and get access to the following things: \")]), t._v(\" \"), s(\"pre\", [t._v(\"results: \" + t._s(Object.keys(t.state.results)))]), t._v(\" \"), s(\"pre\", [t._v(\"state: \" + t._s(Object.keys(t.state.state)))])], null, t.stateResults)], 2) : t._e();\n  },\n  staticRenderFns: [],\n  name: \"AisStateResults\",\n  mixins: [e({\n    connector: a\n  }), t({\n    name: \"StateResults\"\n  })],\n  computed: {\n    stateResults: function () {\n      var t = this.state,\n          e = t.state,\n          a = t.results;\n      return s({}, a, {\n        results: a,\n        state: e\n      });\n    }\n  }\n};","map":{"version":3,"sources":["../../../../src/components/StateResults.vue"],"names":["render","name","mixins","createWidgetMixin","connector","connectStateResults","createSuitMixin","computed","stateResults","this","state","_objectSpread","results"],"mappings":";;;;eAwBe;AAACA,EAAAA,MAAAA,EAAAA,YAAAA;AAAAA,QAAAA,CAAAA,GAAAA,IAAAA;AAAAA,QAAAA,CAAAA,GAAAA,CAAAA,CAAAA,cAAAA;AAAAA,QAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,CAAAA,EAAAA,IAAAA,CAAAA;AAAAA,WAAAA,CAAAA,CAAAA,KAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,KAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,OAAAA,GAAAA,CAAAA,CAAAA,KAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA,CAAAA,IAAAA;AAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,CAAAA,CAAAA,CAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,2EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,6DAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAAAA;AAAAA,GAAD;AAACA,EAAAA,eAAAA,EAAAA,EAAD;AACbC,EAAAA,IAAAA,EAAM,iBADO;AAEbC,EAAAA,MAAAA,EAAQ,CACNC,CAAAA,CAAkB;AAAEC,IAAAA,SAAAA,EAAWC;AAAb,GAAlBF,CADM,EAENG,CAAAA,CAAgB;AAAEL,IAAAA,IAAAA,EAAM;AAAR,GAAhBK,CAFM,CAFK;AAMbC,EAAAA,QAAAA,EAAU;AACRC,IAAAA,YAAAA,EAAAA,YAAAA;AAEE,UAAA,CAAA,GAA2BC,KAAKC,KAAhC;AAAA,UAAgCA,CAAAA,GAAAA,CAAAA,CAAAA,KAAhC;AAAA,UAAgCA,CAAAA,GAAAA,CAAAA,CAAAA,OAAhC;AACA,aAAOC,CAAAA,CAAc,EAAdA,EAAkBC,CAAlBD,EAA2B;AAAA,QAAA,OAAA,EAAEC,CAAF;AAAEA,QAAAA,KAAAA,EAASF;AAAX,OAA3BC,CAAP;AAA6CD;AAJvC;AANG,C","sourcesContent":["<template>\n  <div\n    :class=\"suit()\"\n    v-if=\"state && state.state && state.results\"\n  >\n    <slot v-bind=\"stateResults\">\n      <p>\n        Use this component to have a different layout based on a certain state.\n      </p>\n      <p>\n        Fill in the slot, and get access to the following things:\n      </p>\n      <pre>results: {{ Object.keys(state.results) }}</pre>\n      <pre>state: {{ Object.keys(state.state) }}</pre>\n    </slot>\n  </div>\n</template>\n\n<script>\nimport { createSuitMixin } from '../mixins/suit';\nimport { createWidgetMixin } from '../mixins/widget';\nimport { _objectSpread } from '../util/polyfills';\nimport connectStateResults from '../connectors/connectStateResults';\n\nexport default {\n  name: 'AisStateResults',\n  mixins: [\n    createWidgetMixin({ connector: connectStateResults }),\n    createSuitMixin({ name: 'StateResults' }),\n  ],\n  computed: {\n    stateResults() {\n      // @MAJOR: replace v-bind=\"stateResults\" with :state=\"state.state\" :results=\"state.results\"\n      const { state, results } = this.state;\n      return _objectSpread({}, results, { results, state });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}