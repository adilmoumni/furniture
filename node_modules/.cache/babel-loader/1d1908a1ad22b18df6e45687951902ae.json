{"ast":null,"code":"import { createSuitMixin as e } from \"../mixins/suit.js\";\nimport { createWidgetMixin as t } from \"../mixins/widget.js\";\nimport { connectToggleRefinement as n } from \"instantsearch.js/es/connectors\";\nimport { createPanelConsumerMixin as a } from \"../mixins/panel.js\";\n\nvar i = function (e) {\n  return Boolean(e.value && e.value.count);\n};\n\nexport default {\n  render: function () {\n    var e = this,\n        t = e.$createElement,\n        n = e._self._c || t;\n    return e.state ? n(\"div\", {\n      class: [e.suit(), !e.canRefine && e.suit(\"\", \"noRefinement\")]\n    }, [e._t(\"default\", [n(\"label\", {\n      class: e.suit(\"label\")\n    }, [n(\"input\", {\n      class: e.suit(\"checkbox\"),\n      attrs: {\n        type: \"checkbox\",\n        name: e.state.value.name\n      },\n      domProps: {\n        value: e.on,\n        checked: e.state.value.isRefined\n      },\n      on: {\n        change: function (t) {\n          return e.state.refine(e.state.value);\n        }\n      }\n    }), e._v(\" \"), n(\"span\", {\n      class: e.suit(\"labelText\")\n    }, [e._v(e._s(e.label))]), e._v(\" \"), null !== e.state.value.count ? n(\"span\", {\n      class: e.suit(\"count\")\n    }, [e._v(e._s(e.state.value.count.toLocaleString()))]) : e._e()])], {\n      value: e.state.value,\n      canRefine: e.canRefine,\n      refine: e.state.refine,\n      createURL: e.state.createURL,\n      sendEvent: e.state.sendEvent\n    })], 2) : e._e();\n  },\n  staticRenderFns: [],\n  name: \"AisToggleRefinement\",\n  mixins: [e({\n    name: \"ToggleRefinement\"\n  }), t({\n    connector: n\n  }), a({\n    mapStateToCanRefine: i\n  })],\n  props: {\n    attribute: {\n      type: String,\n      required: !0\n    },\n    label: {\n      type: String,\n      required: !0\n    },\n    on: {\n      type: [String, Number, Boolean, Array],\n      required: !1,\n      default: !0\n    },\n    off: {\n      type: [String, Number, Boolean, Array],\n      required: !1,\n      default: void 0\n    }\n  },\n  computed: {\n    widgetParams: function () {\n      return {\n        attribute: this.attribute,\n        label: this.label,\n        on: this.on,\n        off: this.off\n      };\n    },\n    canRefine: function () {\n      return i(this.state);\n    }\n  }\n};","map":{"version":3,"sources":["../../../../src/components/ToggleRefinement.vue"],"names":["const","mapStateToCanRefine","state","Boolean","value","count","render","name","mixins","createSuitMixin","createWidgetMixin","connector","connectToggleRefinement","createPanelConsumerMixin","props","attribute","type","String","required","label","on","Number","Array","default","off","undefined","computed","widgetParams","this","canRefine"],"mappings":"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","sourcesContent":["<template>\n  <div\n    v-if=\"state\"\n    :class=\"[suit(), !canRefine && suit('', 'noRefinement')]\"\n  >\n    <slot\n      :value=\"state.value\"\n      :can-refine=\"canRefine\"\n      :refine=\"state.refine\"\n      :createURL=\"state.createURL\"\n      :send-event=\"state.sendEvent\"\n    >\n      <label :class=\"suit('label')\">\n        <input\n          :class=\"suit('checkbox')\"\n          type=\"checkbox\"\n          :name=\"state.value.name\"\n          :value=\"on\"\n          :checked=\"state.value.isRefined\"\n          @change=\"state.refine(state.value)\"\n        >\n        <span :class=\"suit('labelText')\">{{ label }}</span>\n        <span\n          v-if=\"state.value.count !== null\"\n          :class=\"suit('count')\"\n        >{{ state.value.count.toLocaleString() }}</span>\n      </label>\n    </slot>\n  </div>\n</template>\n\n<script>\nimport { connectToggleRefinement } from 'instantsearch.js/es/connectors';\nimport { createWidgetMixin } from '../mixins/widget';\nimport { createPanelConsumerMixin } from '../mixins/panel';\nimport { createSuitMixin } from '../mixins/suit';\n\nconst mapStateToCanRefine = state => Boolean(state.value && state.value.count);\n\nexport default {\n  name: 'AisToggleRefinement',\n  mixins: [\n    createSuitMixin({ name: 'ToggleRefinement' }),\n    createWidgetMixin({ connector: connectToggleRefinement }),\n    createPanelConsumerMixin({\n      mapStateToCanRefine,\n    }),\n  ],\n  props: {\n    attribute: {\n      type: String,\n      required: true,\n    },\n    label: {\n      type: String,\n      required: true,\n    },\n    on: {\n      type: [String, Number, Boolean, Array],\n      required: false,\n      default: true,\n    },\n    off: {\n      type: [String, Number, Boolean, Array],\n      required: false,\n      default: undefined,\n    },\n  },\n  computed: {\n    widgetParams() {\n      return {\n        attribute: this.attribute,\n        label: this.label,\n        on: this.on,\n        off: this.off,\n      };\n    },\n    canRefine() {\n      return mapStateToCanRefine(this.state);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}