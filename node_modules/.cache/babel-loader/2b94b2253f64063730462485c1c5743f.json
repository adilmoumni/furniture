{"ast":null,"code":"export function convertNumericRefinementsToFilters(state, attribute) {\n  if (!state) {\n    return null;\n  }\n\n  var filtersObj = state.numericRefinements[attribute];\n  /*\n    filtersObj === {\n      \"<=\": [10],\n      \"=\": [],\n      \">=\": [5]\n    }\n  */\n\n  var filters = [];\n  Object.keys(filtersObj).filter(function (operator) {\n    return Array.isArray(filtersObj[operator]) && filtersObj[operator].length > 0;\n  }).forEach(function (operator) {\n    filtersObj[operator].forEach(function (value) {\n      filters.push(\"\".concat(attribute).concat(operator).concat(value));\n    });\n  });\n  return filters;\n}","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/lib/utils/convertNumericRefinementsToFilters.js"],"names":["convertNumericRefinementsToFilters","state","attribute","filtersObj","numericRefinements","filters","Object","keys","filter","operator","Array","isArray","length","forEach","value","push","concat"],"mappings":"AAAA,OAAO,SAASA,kCAAT,CAA4CC,KAA5C,EAAmDC,SAAnD,EAA8D;AACnE,MAAI,CAACD,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,MAAIE,UAAU,GAAGF,KAAK,CAACG,kBAAN,CAAyBF,SAAzB,CAAjB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE,MAAIG,OAAO,GAAG,EAAd;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,MAAxB,CAA+B,UAAUC,QAAV,EAAoB;AACjD,WAAOC,KAAK,CAACC,OAAN,CAAcR,UAAU,CAACM,QAAD,CAAxB,KAAuCN,UAAU,CAACM,QAAD,CAAV,CAAqBG,MAArB,GAA8B,CAA5E;AACD,GAFD,EAEGC,OAFH,CAEW,UAAUJ,QAAV,EAAoB;AAC7BN,IAAAA,UAAU,CAACM,QAAD,CAAV,CAAqBI,OAArB,CAA6B,UAAUC,KAAV,EAAiB;AAC5CT,MAAAA,OAAO,CAACU,IAAR,CAAa,GAAGC,MAAH,CAAUd,SAAV,EAAqBc,MAArB,CAA4BP,QAA5B,EAAsCO,MAAtC,CAA6CF,KAA7C,CAAb;AACD,KAFD;AAGD,GAND;AAOA,SAAOT,OAAP;AACD","sourcesContent":["export function convertNumericRefinementsToFilters(state, attribute) {\n  if (!state) {\n    return null;\n  }\n\n  var filtersObj = state.numericRefinements[attribute];\n  /*\n    filtersObj === {\n      \"<=\": [10],\n      \"=\": [],\n      \">=\": [5]\n    }\n  */\n\n  var filters = [];\n  Object.keys(filtersObj).filter(function (operator) {\n    return Array.isArray(filtersObj[operator]) && filtersObj[operator].length > 0;\n  }).forEach(function (operator) {\n    filtersObj[operator].forEach(function (value) {\n      filters.push(\"\".concat(attribute).concat(operator).concat(value));\n    });\n  });\n  return filters;\n}"]},"metadata":{},"sourceType":"module"}