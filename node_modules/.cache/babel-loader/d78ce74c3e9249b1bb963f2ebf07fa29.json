{"ast":null,"code":"import { getPropertyByPath as i } from \"instantsearch.js/es/lib/utils\";\nimport { unescape as h } from \"./unescape.js\";\nvar t = {\n  highlightPreTag: \"__ais-highlight__\",\n  highlightPostTag: \"__/ais-highlight__\"\n};\n\nfunction r(i) {\n  var h = i.preTag,\n      t = i.postTag,\n      r = i.highlightedValue;\n  void 0 === r && (r = \"\");\n  var a = r.split(h),\n      g = a.shift(),\n      e = \"\" === g ? [] : [{\n    value: g,\n    isHighlighted: !1\n  }];\n\n  if (t === h) {\n    var l = !0;\n    a.forEach(function (i) {\n      e.push({\n        value: i,\n        isHighlighted: l\n      }), l = !l;\n    });\n  } else a.forEach(function (i) {\n    var h = i.split(t);\n    e.push({\n      value: h[0],\n      isHighlighted: !0\n    }), \"\" !== h[1] && e.push({\n      value: \" \" === h[1] ? \"  \" : h[1],\n      isHighlighted: !1\n    });\n  });\n\n  return e;\n}\n\nfunction a(a) {\n  var g = a.preTag;\n  void 0 === g && (g = t.highlightPreTag);\n  var e = a.postTag;\n  void 0 === e && (e = t.highlightPostTag);\n  var l = a.highlightProperty,\n      s = a.attribute,\n      o = a.hit;\n  if (!o) throw new Error(\"`hit`, the matching record, must be provided\");\n  var u = i(o[l], s) || {};\n  return Array.isArray(u) ? u.map(function (i) {\n    return r({\n      preTag: g,\n      postTag: e,\n      highlightedValue: h(i.value)\n    });\n  }) : r({\n    preTag: g,\n    postTag: e,\n    highlightedValue: h(u.value)\n  });\n}\n\nexport { a as parseAlgoliaHit };","map":{"version":3,"sources":["../../../../src/util/parseAlgoliaHit.js"],"names":["const","TAG_PLACEHOLDER","highlightPreTag","highlightPostTag","parseHighlightedAttribute","ref","splitByPreTag","highlightedValue","split","preTag","firstValue","shift","elements","value","isHighlighted","postTag","let","forEach","push","splitByPostTag","parseAlgoliaHit","hit","Error","highlightObject","getPropertyByPath","highlightProperty","attribute","Array","isArray","map","item","unescape"],"mappings":"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","sourcesContent":["// copied from React InstantSearch\nimport { getPropertyByPath } from 'instantsearch.js/es/lib/utils';\nimport { unescape } from '../util/unescape';\n\nconst TAG_PLACEHOLDER = {\n  highlightPreTag: '__ais-highlight__',\n  highlightPostTag: '__/ais-highlight__',\n};\n\n/**\n * Parses an highlighted attribute into an array of objects with the string value, and\n * a boolean that indicated if this part is highlighted.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nfunction parseHighlightedAttribute({ preTag, postTag, highlightedValue = '' }) {\n  const splitByPreTag = highlightedValue.split(preTag);\n  const firstValue = splitByPreTag.shift();\n  const elements =\n    firstValue === '' ? [] : [{ value: firstValue, isHighlighted: false }];\n\n  if (postTag === preTag) {\n    let isHighlighted = true;\n    splitByPreTag.forEach(split => {\n      elements.push({ value: split, isHighlighted });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach(split => {\n      const splitByPostTag = split.split(postTag);\n\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true,\n      });\n\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          // Vue removes nodes which are just a single space (vuejs/vue#9208),\n          // we replace this by two spaces, which does not have an impact,\n          // unless someone would have `white-space: pre` on the highlights\n          value: splitByPostTag[1] === ' ' ? '  ' : splitByPostTag[1],\n          isHighlighted: false,\n        });\n      }\n    });\n  }\n\n  return elements;\n}\n\n/**\n * Find an highlighted attribute given an `attribute` and an `highlightProperty`, parses it,\n * and provided an array of objects with the string value and a boolean if this\n * value is highlighted.\n *\n * In order to use this feature, highlight must be activated in the configuration of\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\n * highlightPostTag in Algolia configuration.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\n * @param {string} attribute - the highlighted attribute to look for\n * @param {object} hit - the actual hit returned by Algolia.\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nexport function parseAlgoliaHit({\n  preTag = TAG_PLACEHOLDER.highlightPreTag,\n  postTag = TAG_PLACEHOLDER.highlightPostTag,\n  highlightProperty,\n  attribute,\n  hit,\n}) {\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n\n  const highlightObject =\n    getPropertyByPath(hit[highlightProperty], attribute) || {};\n\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map(item =>\n      parseHighlightedAttribute({\n        preTag,\n        postTag,\n        highlightedValue: unescape(item.value),\n      })\n    );\n  }\n\n  return parseHighlightedAttribute({\n    preTag,\n    postTag,\n    highlightedValue: unescape(highlightObject.value),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}