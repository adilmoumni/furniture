{"ast":null,"code":"var nextMicroTask = Promise.resolve();\n\nvar defer = function defer(callback) {\n  var progress = null;\n  var cancelled = false;\n\n  var fn = function fn() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (progress !== null) {\n      return;\n    }\n\n    progress = nextMicroTask.then(function () {\n      progress = null;\n\n      if (cancelled) {\n        cancelled = false;\n        return;\n      }\n\n      callback.apply(void 0, args);\n    });\n  };\n\n  fn.wait = function () {\n    if (progress === null) {\n      throw new Error('The deferred function should be called before calling `wait()`');\n    }\n\n    return progress;\n  };\n\n  fn.cancel = function () {\n    if (progress === null) {\n      return;\n    }\n\n    cancelled = true;\n  };\n\n  return fn;\n};\n\nexport default defer;","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/lib/utils/defer.js"],"names":["nextMicroTask","Promise","resolve","defer","callback","progress","cancelled","fn","_len","arguments","length","args","Array","_key","then","apply","wait","Error","cancel"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAACC,OAAR,EAApB;;AAEA,IAAIC,KAAK,GAAG,SAASA,KAAT,CAAeC,QAAf,EAAyB;AACnC,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,SAAS,GAAG,KAAhB;;AAEA,MAAIC,EAAE,GAAG,SAASA,EAAT,GAAc;AACrB,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,QAAIR,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACD;;AAEDA,IAAAA,QAAQ,GAAGL,aAAa,CAACc,IAAd,CAAmB,YAAY;AACxCT,MAAAA,QAAQ,GAAG,IAAX;;AAEA,UAAIC,SAAJ,EAAe;AACbA,QAAAA,SAAS,GAAG,KAAZ;AACA;AACD;;AAEDF,MAAAA,QAAQ,CAACW,KAAT,CAAe,KAAK,CAApB,EAAuBJ,IAAvB;AACD,KATU,CAAX;AAUD,GAnBD;;AAqBAJ,EAAAA,EAAE,CAACS,IAAH,GAAU,YAAY;AACpB,QAAIX,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAM,IAAIY,KAAJ,CAAU,gEAAV,CAAN;AACD;;AAED,WAAOZ,QAAP;AACD,GAND;;AAQAE,EAAAA,EAAE,CAACW,MAAH,GAAY,YAAY;AACtB,QAAIb,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACD;;AAEDC,IAAAA,SAAS,GAAG,IAAZ;AACD,GAND;;AAQA,SAAOC,EAAP;AACD,CA1CD;;AA4CA,eAAeJ,KAAf","sourcesContent":["var nextMicroTask = Promise.resolve();\n\nvar defer = function defer(callback) {\n  var progress = null;\n  var cancelled = false;\n\n  var fn = function fn() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (progress !== null) {\n      return;\n    }\n\n    progress = nextMicroTask.then(function () {\n      progress = null;\n\n      if (cancelled) {\n        cancelled = false;\n        return;\n      }\n\n      callback.apply(void 0, args);\n    });\n  };\n\n  fn.wait = function () {\n    if (progress === null) {\n      throw new Error('The deferred function should be called before calling `wait()`');\n    }\n\n    return progress;\n  };\n\n  fn.cancel = function () {\n    if (progress === null) {\n      return;\n    }\n\n    cancelled = true;\n  };\n\n  return fn;\n};\n\nexport default defer;"]},"metadata":{},"sourceType":"module"}