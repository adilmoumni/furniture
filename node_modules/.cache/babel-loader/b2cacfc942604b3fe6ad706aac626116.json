{"ast":null,"code":"var t = {\n  \"&amp;\": \"&\",\n  \"&lt;\": \"<\",\n  \"&gt;\": \">\",\n  \"&quot;\": '\"',\n  \"&#39;\": \"'\"\n},\n    e = /&(?:amp|lt|gt|quot|#39);/g,\n    r = RegExp(e.source);\n\nfunction u(u) {\n  return u && r.test(u) ? u.replace(e, function (e) {\n    return t[e];\n  }) : u;\n}\n\nexport { u as unescape };","map":{"version":3,"sources":["../../../../src/util/unescape.js"],"names":["const","htmlUnescapes","&amp;","&lt;","&gt;","&quot;","&#39;","reEscapedHtml","reHasEscapedHtml","RegExp","source","unescape","string","test","replace","character"],"mappings":"AAMAA,IAAMC,CAAAA,GAAgB;AACpBC,WAAS,GADW;AAEpBC,UAAQ,GAFY;AAGpBC,UAAQ,GAHY;AAIpBC,YAAU,GAJU;AAKpBC,WAAS;AALW,CAAtBN;AAAAA,IASMO,CAAAA,GAAgB,2BATtBP;AAAAA,IAUMQ,CAAAA,GAAmBC,MAAAA,CAAOF,CAAAA,CAAcG,MAArBD,CAVzBT;;AA+BO,SAASW,CAAT,CAAkBC,CAAlB,EAAkBA;AACvB,SAAOA,CAAAA,IAAUJ,CAAAA,CAAiBK,IAAjBL,CAAsBI,CAAtBJ,CAAVI,GACHA,CAAAA,CAAOE,OAAPF,CAAeL,CAAfK,EAAeL,UAAeQ,CAAfR,EAAeQ;AAAAA,WAAad,CAAAA,CAAcc,CAAdd,CAAbc;AAA2BA,GAAzDH,CADGA,GAEHA,CAFJ;AAEIA;;AAAAA,SAAAA,CAAAA,IAAAA,QAAAA","sourcesContent":["/**\n * This implementation is taken from Lodash implementation.\n * See: https://github.com/lodash/lodash/blob/4.17.11-npm/unescape.js\n */\n\n/** Used to map HTML entities to characters. */\nconst htmlUnescapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\n\n/** Used to match HTML entities and HTML characters. */\nconst reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g;\nconst reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n/**\n * The inverse of `_.escape`; this method converts the HTML entities\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n * their corresponding characters.\n *\n * **Note:** No other HTML entities are unescaped. To unescape additional\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\n *\n * @static\n * @memberOf _\n * @since 0.6.0\n * @category String\n * @param {string} [string=''] The string to unescape.\n * @returns {string} Returns the unescaped string.\n * @example\n *\n * _.unescape('fred, barney, &amp; pebbles');\n * // => 'fred, barney, & pebbles'\n */\nexport function unescape(string) {\n  return string && reHasEscapedHtml.test(string)\n    ? string.replace(reEscapedHtml, character => htmlUnescapes[character])\n    : string;\n}\n"]},"metadata":{},"sourceType":"module"}