{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { uniq, find, createDocumentationMessageGenerator, warning } from '../utils';\n\nvar getSelectedHits = function getSelectedHits(hits, selectedObjectIDs) {\n  return selectedObjectIDs.map(function (objectID) {\n    var hit = find(hits, function (h) {\n      return h.objectID === objectID;\n    });\n\n    if (typeof hit === 'undefined') {\n      throw new Error(\"Could not find objectID \\\"\".concat(objectID, \"\\\" passed to `clickedObjectIDsAfterSearch` in the returned hits. This is necessary to infer the absolute position and the query ID.\"));\n    }\n\n    return hit;\n  });\n};\n\nvar getQueryID = function getQueryID(selectedHits) {\n  var queryIDs = uniq(selectedHits.map(function (hit) {\n    return hit.__queryID;\n  }));\n\n  if (queryIDs.length > 1) {\n    throw new Error('Insights currently allows a single `queryID`. The `objectIDs` provided map to multiple `queryID`s.');\n  }\n\n  var queryID = queryIDs[0];\n\n  if (typeof queryID !== 'string') {\n    throw new Error(\"Could not infer `queryID`. Ensure InstantSearch `clickAnalytics: true` was added with the Configure widget.\\n\\nSee: https://alg.li/lNiZZ7\");\n  }\n\n  return queryID;\n};\n\nvar getPositions = function getPositions(selectedHits) {\n  return selectedHits.map(function (hit) {\n    return hit.__position;\n  });\n};\n\nexport var inferPayload = function inferPayload(_ref) {\n  var method = _ref.method,\n      results = _ref.results,\n      hits = _ref.hits,\n      objectIDs = _ref.objectIDs;\n  var index = results.index;\n  var selectedHits = getSelectedHits(hits, objectIDs);\n  var queryID = getQueryID(selectedHits);\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch':\n      {\n        var positions = getPositions(selectedHits);\n        return {\n          index: index,\n          queryID: queryID,\n          objectIDs: objectIDs,\n          positions: positions\n        };\n      }\n\n    case 'convertedObjectIDsAfterSearch':\n      return {\n        index: index,\n        queryID: queryID,\n        objectIDs: objectIDs\n      };\n\n    default:\n      throw new Error(\"Unsupported method passed to insights: \\\"\".concat(method, \"\\\".\"));\n  }\n};\n\nvar wrapInsightsClient = function wrapInsightsClient(aa, results, hits) {\n  return function (method, payload) {\n    process.env.NODE_ENV === 'development' ? warning(false, \"`insights` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\") : void 0;\n\n    if (!aa) {\n      var withInstantSearchUsage = createDocumentationMessageGenerator({\n        name: 'instantsearch'\n      });\n      throw new Error(withInstantSearchUsage('The `insightsClient` option has not been provided to `instantsearch`.'));\n    }\n\n    if (!Array.isArray(payload.objectIDs)) {\n      throw new TypeError('Expected `objectIDs` to be an array.');\n    }\n\n    var inferredPayload = inferPayload({\n      method: method,\n      results: results,\n      hits: hits,\n      objectIDs: payload.objectIDs\n    });\n    aa(method, _objectSpread(_objectSpread({}, inferredPayload), payload));\n  };\n};\n/**\n * @deprecated This function will be still supported in 4.x releases, but not further. It is replaced by the `insights` middleware. For more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\n * It passes `insights` to `HitsWithInsightsListener` and `InfiniteHitsWithInsightsListener`.\n */\n\n\nexport default function withInsights(connector) {\n  return function (renderFn, unmountFn) {\n    return connector(function (renderOptions, isFirstRender) {\n      var results = renderOptions.results,\n          hits = renderOptions.hits,\n          instantSearchInstance = renderOptions.instantSearchInstance;\n\n      if (results && hits && instantSearchInstance) {\n        var insights = wrapInsightsClient(instantSearchInstance.insightsClient, results, hits);\n        return renderFn(_objectSpread(_objectSpread({}, renderOptions), {}, {\n          insights: insights\n        }), isFirstRender);\n      }\n\n      return renderFn(renderOptions, isFirstRender);\n    }, unmountFn);\n  };\n}","map":{"version":3,"sources":["/Users/adil/Documents/GitHub/furniture-front/node_modules/instantsearch.js/es/lib/insights/client.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","uniq","find","createDocumentationMessageGenerator","warning","getSelectedHits","hits","selectedObjectIDs","map","objectID","hit","h","Error","concat","getQueryID","selectedHits","queryIDs","__queryID","queryID","getPositions","__position","inferPayload","_ref","method","results","objectIDs","index","positions","wrapInsightsClient","aa","payload","process","env","NODE_ENV","withInstantSearchUsage","name","Array","isArray","TypeError","inferredPayload","withInsights","connector","renderFn","unmountFn","renderOptions","isFirstRender","instantSearchInstance","insights","insightsClient"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { uniq, find, createDocumentationMessageGenerator, warning } from '../utils';\n\nvar getSelectedHits = function getSelectedHits(hits, selectedObjectIDs) {\n  return selectedObjectIDs.map(function (objectID) {\n    var hit = find(hits, function (h) {\n      return h.objectID === objectID;\n    });\n\n    if (typeof hit === 'undefined') {\n      throw new Error(\"Could not find objectID \\\"\".concat(objectID, \"\\\" passed to `clickedObjectIDsAfterSearch` in the returned hits. This is necessary to infer the absolute position and the query ID.\"));\n    }\n\n    return hit;\n  });\n};\n\nvar getQueryID = function getQueryID(selectedHits) {\n  var queryIDs = uniq(selectedHits.map(function (hit) {\n    return hit.__queryID;\n  }));\n\n  if (queryIDs.length > 1) {\n    throw new Error('Insights currently allows a single `queryID`. The `objectIDs` provided map to multiple `queryID`s.');\n  }\n\n  var queryID = queryIDs[0];\n\n  if (typeof queryID !== 'string') {\n    throw new Error(\"Could not infer `queryID`. Ensure InstantSearch `clickAnalytics: true` was added with the Configure widget.\\n\\nSee: https://alg.li/lNiZZ7\");\n  }\n\n  return queryID;\n};\n\nvar getPositions = function getPositions(selectedHits) {\n  return selectedHits.map(function (hit) {\n    return hit.__position;\n  });\n};\n\nexport var inferPayload = function inferPayload(_ref) {\n  var method = _ref.method,\n      results = _ref.results,\n      hits = _ref.hits,\n      objectIDs = _ref.objectIDs;\n  var index = results.index;\n  var selectedHits = getSelectedHits(hits, objectIDs);\n  var queryID = getQueryID(selectedHits);\n\n  switch (method) {\n    case 'clickedObjectIDsAfterSearch':\n      {\n        var positions = getPositions(selectedHits);\n        return {\n          index: index,\n          queryID: queryID,\n          objectIDs: objectIDs,\n          positions: positions\n        };\n      }\n\n    case 'convertedObjectIDsAfterSearch':\n      return {\n        index: index,\n        queryID: queryID,\n        objectIDs: objectIDs\n      };\n\n    default:\n      throw new Error(\"Unsupported method passed to insights: \\\"\".concat(method, \"\\\".\"));\n  }\n};\n\nvar wrapInsightsClient = function wrapInsightsClient(aa, results, hits) {\n  return function (method, payload) {\n    process.env.NODE_ENV === 'development' ? warning(false, \"`insights` function has been deprecated. It is still supported in 4.x releases, but not further. It is replaced by the `insights` middleware.\\n\\nFor more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\") : void 0;\n\n    if (!aa) {\n      var withInstantSearchUsage = createDocumentationMessageGenerator({\n        name: 'instantsearch'\n      });\n      throw new Error(withInstantSearchUsage('The `insightsClient` option has not been provided to `instantsearch`.'));\n    }\n\n    if (!Array.isArray(payload.objectIDs)) {\n      throw new TypeError('Expected `objectIDs` to be an array.');\n    }\n\n    var inferredPayload = inferPayload({\n      method: method,\n      results: results,\n      hits: hits,\n      objectIDs: payload.objectIDs\n    });\n    aa(method, _objectSpread(_objectSpread({}, inferredPayload), payload));\n  };\n};\n/**\n * @deprecated This function will be still supported in 4.x releases, but not further. It is replaced by the `insights` middleware. For more information, visit https://www.algolia.com/doc/guides/getting-insights-and-analytics/search-analytics/click-through-and-conversions/how-to/send-click-and-conversion-events-with-instantsearch/js/\n * It passes `insights` to `HitsWithInsightsListener` and `InfiniteHitsWithInsightsListener`.\n */\n\n\nexport default function withInsights(connector) {\n  return function (renderFn, unmountFn) {\n    return connector(function (renderOptions, isFirstRender) {\n      var results = renderOptions.results,\n          hits = renderOptions.hits,\n          instantSearchInstance = renderOptions.instantSearchInstance;\n\n      if (results && hits && instantSearchInstance) {\n        var insights = wrapInsightsClient(instantSearchInstance.insightsClient, results, hits);\n        return renderFn(_objectSpread(_objectSpread({}, renderOptions), {}, {\n          insights: insights\n        }), isFirstRender);\n      }\n\n      return renderFn(renderOptions, isFirstRender);\n    }, unmountFn);\n  };\n}"]},"metadata":{},"sourceType":"module"}