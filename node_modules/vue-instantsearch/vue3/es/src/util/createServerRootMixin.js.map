{"version":3,"file":"createServerRootMixin.js","sources":["../../../../src/util/createServerRootMixin.js"],"sourcesContent":["import instantsearch from 'instantsearch.js/es';\nimport algoliaHelper from 'algoliasearch-helper';\nimport { isVue3, isVue2, Vue2, createSSRApp } from '../util/vue-compat';\nconst { SearchResults, SearchParameters } = algoliaHelper;\nimport { warn } from './warn';\n\nfunction walkIndex(indexWidget, visit) {\n  visit(indexWidget);\n\n  return indexWidget.getWidgets().forEach(widget => {\n    if (widget.$$type !== 'ais.index') return;\n    visit(widget);\n    walkIndex(widget, visit);\n  });\n}\n\nfunction searchOnlyWithDerivedHelpers(helper) {\n  return new Promise((resolve, reject) => {\n    helper.searchOnlyWithDerivedHelpers();\n\n    // we assume all derived helpers resolve at least in the same tick\n    helper.derivedHelpers[0].on('result', () => {\n      resolve();\n    });\n\n    helper.derivedHelpers.forEach(derivedHelper =>\n      derivedHelper.on('error', e => {\n        reject(e);\n      })\n    );\n  });\n}\n\nfunction defaultCloneComponent(componentInstance, { mixins = [] } = {}) {\n  const options = {\n    serverPrefetch: undefined,\n    fetch: undefined,\n    _base: undefined,\n    name: 'ais-ssr-root-component',\n  };\n\n  let app;\n\n  if (isVue3) {\n    const appOptions = Object.assign({}, componentInstance.$options, options);\n    appOptions.mixins = [...appOptions.mixins, ...mixins];\n    app = createSSRApp(appOptions);\n    if (componentInstance.$router) {\n      app.use(componentInstance.$router);\n    }\n    if (componentInstance.$store) {\n      app.use(componentInstance.$store);\n    }\n  } else {\n    // copy over global Vue APIs\n    options.router = componentInstance.$router;\n    options.store = componentInstance.$store;\n\n    const Extended = componentInstance.$vnode\n      ? componentInstance.$vnode.componentOptions.Ctor.extend(options)\n      : Vue2.component(Object.assign({}, componentInstance.$options, options));\n\n    app = new Extended({\n      propsData: componentInstance.$options.propsData,\n      mixins: [...mixins],\n    });\n  }\n\n  // https://stackoverflow.com/a/48195006/3185307\n  app.$slots = componentInstance.$slots;\n  app.$root = componentInstance.$root;\n  if (isVue2) {\n    app.$options.serverPrefetch = [];\n  }\n\n  return app;\n}\n\nfunction augmentInstantSearch(\n  instantSearchOptions,\n  searchClient,\n  indexName,\n  cloneComponent\n) {\n  /* eslint-disable no-param-reassign */\n\n  const helper = algoliaHelper(searchClient, indexName);\n  const search = instantsearch(instantSearchOptions);\n\n  let resultsState;\n\n  /**\n   * main API for SSR, called in serverPrefetch of a root component which contains instantsearch\n   * @param {Object} props the object including `component` and `renderToString`\n   * @param {Object} props.component the calling component's `this`\n   * @param {Function} props.renderToString the function to render componentInstance to string\n   * @returns {Promise} result of the search, to save for .hydrate\n   */\n  search.findResultsState = function({ component, renderToString }) {\n    if (!renderToString) {\n      throw new Error(\n        'findResultsState requires `renderToString: (component) => Promise<string>` in the first argument.'\n      );\n    }\n\n    let app;\n    let renderedComponent;\n\n    return Promise.resolve()\n      .then(() => {\n        app = cloneComponent(component, {\n          mixins: [\n            {\n              created() {\n                // eslint-disable-next-line consistent-this\n                renderedComponent = this;\n                this.instantsearch.helper = helper;\n                this.instantsearch.mainHelper = helper;\n\n                this.instantsearch.mainIndex.init({\n                  instantSearchInstance: this.instantsearch,\n                  parent: null,\n                  uiState: this.instantsearch._initialUiState,\n                });\n              },\n            },\n          ],\n        });\n      })\n      .then(() => renderToString(app))\n      .then(() => searchOnlyWithDerivedHelpers(helper))\n      .then(() => {\n        const results = {};\n        walkIndex(renderedComponent.instantsearch.mainIndex, widget => {\n          results[widget.getIndexId()] = widget.getResults();\n        });\n\n        search.hydrate(results);\n\n        resultsState = Object.keys(results)\n          .map(indexId => {\n            const { _state, _rawResults } = results[indexId];\n            return [\n              indexId,\n              {\n                // copy just the values of SearchParameters, not the functions\n                _state: Object.keys(_state).reduce((acc, key) => {\n                  acc[key] = _state[key];\n                  return acc;\n                }, {}),\n                _rawResults,\n              },\n            ];\n          })\n          .reduce(\n            (acc, [key, val]) => {\n              acc[key] = val;\n              return acc;\n            },\n            {\n              __identifier: 'stringified',\n            }\n          );\n        return search.getState();\n      });\n  };\n\n  /**\n   * @returns {Promise} result state to serialize and enter into .hydrate\n   */\n  search.getState = function() {\n    if (!resultsState) {\n      throw new Error('You need to wait for findResultsState to finish');\n    }\n    return resultsState;\n  };\n\n  /**\n   * make sure correct data is available in each widget's state.\n   * called in widget mixin with (this.widget, this)\n   *\n   * @param {object} widget The widget instance\n   * @param {object} parent The local parent index\n   * @returns {void}\n   */\n  search.__forceRender = function(widget, parent) {\n    const localHelper = parent.getHelper();\n\n    const results = search.__initialSearchResults[parent.getIndexId()];\n\n    // this happens when a different InstantSearch gets rendered initially,\n    // after the hydrate finished. There's thus no initial results available.\n    if (!results) {\n      return;\n    }\n\n    const state = results._state;\n\n    // helper gets created in init, but that means it doesn't get the injected\n    // parameters, because those are from the lastResults\n    localHelper.state = state;\n\n    widget.render({\n      helper: localHelper,\n      results,\n      scopedResults: parent.getScopedResults().map(result =>\n        Object.assign(result, {\n          results: search.__initialSearchResults[result.indexId],\n        })\n      ),\n      parent,\n      state,\n      templatesConfig: {},\n      createURL: parent.createURL,\n      instantSearchInstance: search,\n      searchMetadata: {\n        isSearchStalled: false,\n      },\n    });\n  };\n\n  /**\n   * Called both in server\n   * @param {object} results a map of indexId: SearchResults\n   * @returns {void}\n   */\n  search.hydrate = function(results) {\n    if (!results) {\n      warn(\n        'The result of `findResultsState()` needs to be passed to `hydrate()`.'\n      );\n      return;\n    }\n\n    const initialResults =\n      results.__identifier === 'stringified'\n        ? Object.keys(results).reduce((acc, indexId) => {\n            if (indexId === '__identifier') {\n              return acc;\n            }\n            acc[indexId] = new SearchResults(\n              new SearchParameters(results[indexId]._state),\n              results[indexId]._rawResults\n            );\n            return acc;\n          }, {})\n        : results;\n\n    search.__initialSearchResults = initialResults;\n\n    search.helper = helper;\n    search.mainHelper = helper;\n\n    search.mainIndex.init({\n      instantSearchInstance: search,\n      parent: null,\n      uiState: search._initialUiState,\n    });\n  };\n\n  /* eslint-enable no-param-reassign */\n  return search;\n}\n\nexport function createServerRootMixin(instantSearchOptions = {}) {\n  const {\n    searchClient,\n    indexName,\n    $cloneComponent = defaultCloneComponent,\n  } = instantSearchOptions;\n\n  if (!searchClient || !indexName) {\n    throw new Error(\n      'createServerRootMixin requires `searchClient` and `indexName` in the first argument'\n    );\n  }\n\n  const search = augmentInstantSearch(\n    instantSearchOptions,\n    searchClient,\n    indexName,\n    $cloneComponent\n  );\n\n  // put this in the user's root Vue instance\n  // we can then reuse that InstantSearch instance seamlessly from `ais-instant-search-ssr`\n  const rootMixin = {\n    provide() {\n      return {\n        $_ais_ssrInstantSearchInstance: this.instantsearch,\n      };\n    },\n    data() {\n      return {\n        // this is in data, so that the real & duplicated render do not share\n        // the same instantsearch instance.\n        instantsearch: search,\n      };\n    },\n  };\n\n  return rootMixin;\n}\n"],"names":["defaultCloneComponent","componentInstance","ref","const","app","options","serverPrefetch","undefined","fetch","_base","name","appOptions","Object","assign","$options","mixins","createSSRApp","$router","use","$store","$slots","$root","augmentInstantSearch","instantSearchOptions","searchClient","indexName","cloneComponent","resultsState","helper","algoliaHelper","search","instantsearch","findResultsState","renderedComponent","renderToString","Error","Promise","resolve","then","component","created","this","mainHelper","mainIndex","init","instantSearchInstance","parent","uiState","_initialUiState","reject","searchOnlyWithDerivedHelpers","derivedHelpers","on","forEach","derivedHelper","e","results","walkIndex","indexWidget","visit","getWidgets","widget","$$type","getIndexId","getResults","hydrate","keys","map","indexId","_state","reduce","acc","key","_rawResults","val","__identifier","getState","__forceRender","localHelper","getHelper","__initialSearchResults","state","render","scopedResults","getScopedResults","result","templatesConfig","createURL","searchMetadata","isSearchStalled","initialResults","SearchResults","SearchParameters","warn","createServerRootMixin","$cloneComponent","provide","$_ais_ssrInstantSearchInstance","data"],"mappings":"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"}