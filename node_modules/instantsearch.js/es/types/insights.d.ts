export declare type InsightsClientMethod = 'viewedObjectIDs' | 'clickedFilters' | 'clickedObjectIDsAfterSearch' | 'convertedObjectIDsAfterSearch';
export declare type InsightsClientPayload = {
    eventName: string;
    queryID: string;
    index: string;
    objectIDs: string[];
    positions?: number[];
};
export declare type InsightsSetUserToken = (method: 'setUserToken', userToken: string) => void;
export declare type InsightsSendEvent = (method: InsightsClientMethod, payload: InsightsClientPayload) => void;
export declare type InsightsOnUserTokenChange = (method: 'onUserTokenChange', callback?: (userToken: string) => void, options?: {
    immediate?: boolean;
}) => void;
export declare type InsightsGetUserToken = (method: 'getUserToken', options?: any, callback?: (error: any, userToken: string) => void) => void;
export declare type InsightsInit = (method: 'init', options: {
    appId: string;
    apiKey: string;
}) => void;
export declare type InsightsAddAlgoliaAgent = (method: 'addAlgoliaAgent', algoliaAgent: string) => void;
export declare type InsightsClient = InsightsAddAlgoliaAgent & InsightsSendEvent & InsightsOnUserTokenChange & InsightsInit & InsightsSetUserToken & InsightsGetUserToken & {
    queue?: Array<[string, any]>;
};
export declare type InsightsClientWrapper = (method: InsightsClientMethod, payload: Partial<InsightsClientPayload>) => void;
