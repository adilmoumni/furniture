import { Command, flags } from "@oclif/command";
declare class ReactInstant extends Command {
    static description: string;
    static flags: {
        branch: flags.IOptionFlag<string | undefined>;
        buildScript: flags.IOptionFlag<string | undefined>;
        envPath: flags.IOptionFlag<string | undefined>;
        excludeTest: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        forceClean: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        omitServe: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        port: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        save: flags.IOptionFlag<string | undefined>;
        verbose: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        version: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
    };
    static args: {
        name: string;
    }[];
    private verbose;
    private prefersYarn;
    private dir;
    private readonly platform;
    private readonly missingDeps;
    /**
     * Prefered package manager. (yarn or npm)
     */
    private get getPM();
    /**
     * Here it all begins...
     */
    run(): Promise<void>;
    /**
     * Checks if required packages are installed.
     */
    private checkDependencies;
    /**
     * Clones git repository.
     * @param url URL to repository.
     */
    private cloneRepo;
    /**
     * Copies sideloaded files.
     * @param envPath Path to .env file.
     * TODO: Refactor.
     */
    private copyFiles;
    /**
     * Installs project's dependencies.
     */
    private installDeps;
    /**
     * Builds project.
     * @param buildScript Script name for building project. (Defaults to "build")
     */
    private buildRepo;
    /**
     * Tests project.
     */
    private testRepo;
    /**
     * Serves project.
     * @param port Served port.
     */
    private serveRepo;
    private cleanRepo;
    /**
     * Prints verbose log.
     * @param args Message.
     */
    private verboseLog;
    /**
     * Parses git url.
     * @param url Url to repository. eg. https://github.com/user/repo.git or user/repo
     */
    private parseUrl;
    /**
     * Constructs an command for prefered package manager.
     * @param args String args for both yarn and npm or an object with separated args for each package manager.
     */
    private constructPMCommand;
}
export = ReactInstant;
